/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPendleDataInterface extends ethers.utils.Interface {
  functions: {
    "addForge(bytes32,address)": FunctionFragment;
    "addMarket(bytes32,address,address,address)": FunctionFragment;
    "addMarketFactory(bytes32,address)": FunctionFragment;
    "allMarketsLength()": FunctionFragment;
    "curveShiftBlockDelta()": FunctionFragment;
    "expiryDivisor()": FunctionFragment;
    "forgeFee()": FunctionFragment;
    "getForgeAddress(bytes32)": FunctionFragment;
    "getMarket(bytes32,address,address)": FunctionFragment;
    "getMarketByIndex(uint256)": FunctionFragment;
    "getMarketFactoryAddress(bytes32)": FunctionFragment;
    "getMarketFromKey(address,address,bytes32)": FunctionFragment;
    "getPendleYieldTokens(bytes32,address,uint256)": FunctionFragment;
    "interestUpdateRateDeltaForMarket()": FunctionFragment;
    "isMarket(address)": FunctionFragment;
    "isValidOT(bytes32,address,uint256)": FunctionFragment;
    "isValidXYT(bytes32,address,uint256)": FunctionFragment;
    "isXyt(address)": FunctionFragment;
    "lockDenominator()": FunctionFragment;
    "lockNumerator()": FunctionFragment;
    "otTokens(bytes32,address,uint256)": FunctionFragment;
    "pausingManager()": FunctionFragment;
    "protocolSwapFee()": FunctionFragment;
    "router()": FunctionFragment;
    "setCurveShiftBlockDelta(uint256)": FunctionFragment;
    "setExpiryDivisor(uint256)": FunctionFragment;
    "setForgeFactoryValidity(bytes32,bytes32,bool)": FunctionFragment;
    "setForgeFee(uint256)": FunctionFragment;
    "setInterestUpdateRateDeltaForMarket(uint256)": FunctionFragment;
    "setLockParams(uint256,uint256)": FunctionFragment;
    "setMarketFees(uint256,uint256)": FunctionFragment;
    "setTreasury(address)": FunctionFragment;
    "storeTokens(bytes32,address,address,address,uint256)": FunctionFragment;
    "swapFee()": FunctionFragment;
    "treasury()": FunctionFragment;
    "validForgeFactoryPair(bytes32,bytes32)": FunctionFragment;
    "xytTokens(bytes32,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addForge",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarket",
    values: [BytesLike, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketFactory",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "allMarketsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "curveShiftBlockDelta",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "expiryDivisor",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "forgeFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getForgeAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarket",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketByIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFactoryAddress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMarketFromKey",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendleYieldTokens",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "interestUpdateRateDeltaForMarket",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "isMarket", values: [string]): string;
  encodeFunctionData(
    functionFragment: "isValidOT",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isValidXYT",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "isXyt", values: [string]): string;
  encodeFunctionData(
    functionFragment: "lockDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "otTokens",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "protocolSwapFee",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setCurveShiftBlockDelta",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setExpiryDivisor",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeFactoryValidity",
    values: [BytesLike, BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setInterestUpdateRateDeltaForMarket",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setLockParams",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFees",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setTreasury", values: [string]): string;
  encodeFunctionData(
    functionFragment: "storeTokens",
    values: [BytesLike, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "validForgeFactoryPair",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "xytTokens",
    values: [BytesLike, string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addForge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addMarketFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "allMarketsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "curveShiftBlockDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "expiryDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forgeFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getForgeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMarket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMarketByIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFactoryAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMarketFromKey",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPendleYieldTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "interestUpdateRateDeltaForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMarket", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValidOT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isValidXYT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isXyt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "otTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "protocolSwapFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCurveShiftBlockDelta",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExpiryDivisor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeFactoryValidity",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setInterestUpdateRateDeltaForMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLockParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTreasury",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "storeTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "validForgeFactoryPair",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xytTokens", data: BytesLike): Result;

  events: {
    "CurveShiftBlockDeltaSet(uint256)": EventFragment;
    "ExpiryDivisorSet(uint256)": EventFragment;
    "ForgeAdded(bytes32,address)": EventFragment;
    "ForgeFactoryValiditySet(bytes32,bytes32,bool)": EventFragment;
    "ForgeFeeSet(uint256)": EventFragment;
    "InterestUpdateRateDeltaForMarketSet(uint256)": EventFragment;
    "LockParamsSet(uint256,uint256)": EventFragment;
    "MarketFeesSet(uint256,uint256)": EventFragment;
    "MarketPairAdded(address,address,address)": EventFragment;
    "NewMarketFactory(bytes32,address)": EventFragment;
    "TreasurySet(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CurveShiftBlockDeltaSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExpiryDivisorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeFactoryValiditySet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeFeeSet"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "InterestUpdateRateDeltaForMarketSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LockParamsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketFeesSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketPairAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewMarketFactory"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TreasurySet"): EventFragment;
}

export class IPendleData extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPendleDataInterface;

  functions: {
    addForge(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addForge(bytes32,address)"(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarket(bytes32,address,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarketFactory(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketFactory(bytes32,address)"(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allMarketsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    "allMarketsLength()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<[BigNumber]>;

    "curveShiftBlockDelta()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    expiryDivisor(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expiryDivisor()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    forgeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "forgeFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    getForgeAddress(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { forgeAddress: string }>;

    "getForgeAddress(bytes32)"(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { forgeAddress: string }>;

    getMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { market: string }>;

    "getMarket(bytes32,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<[string] & { market: string }>;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { market: string }>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { market: string }>;

    getMarketFactoryAddress(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { marketFactoryAddress: string }>;

    "getMarketFactoryAddress(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { marketFactoryAddress: string }>;

    getMarketFromKey(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { market: string }>;

    "getMarketFromKey(address,address,bytes32)"(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { market: string }>;

    getPendleYieldTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "getPendleYieldTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    interestUpdateRateDeltaForMarket(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "interestUpdateRateDeltaForMarket()"(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isMarket(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    "isMarket(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    isValidOT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidOT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isValidXYT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "isValidXYT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isXyt(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    "isXyt(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { result: boolean }>;

    lockDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockDenominator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockNumerator()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    otTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { ot: string }>;

    "otTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { ot: string }>;

    pausingManager(overrides?: CallOverrides): Promise<[string]>;

    "pausingManager()"(overrides?: CallOverrides): Promise<[string]>;

    protocolSwapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "protocolSwapFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setCurveShiftBlockDelta(
      _blockDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setCurveShiftBlockDelta(uint256)"(
      _blockDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExpiryDivisor(
      _expiryDivisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setExpiryDivisor(uint256)"(
      _expiryDivisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeFactoryValidity(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeFactoryValidity(bytes32,bytes32,bool)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeFee(
      _forgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeFee(uint256)"(
      _forgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setInterestUpdateRateDeltaForMarket(uint256)"(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLockParams(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLockParams(uint256,uint256)"(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketFees(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketFees(uint256,uint256)"(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    storeTokens(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "storeTokens(bytes32,address,address,address,uint256)"(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    "swapFee()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    treasury(overrides?: CallOverrides): Promise<[string]>;

    "treasury()"(overrides?: CallOverrides): Promise<[string]>;

    validForgeFactoryPair(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "validForgeFactoryPair(bytes32,bytes32)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    xytTokens(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { xyt: string }>;

    "xytTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string] & { xyt: string }>;
  };

  addForge(
    forgeId: BytesLike,
    forgeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addForge(bytes32,address)"(
    forgeId: BytesLike,
    forgeAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarket(
    marketFactoryId: BytesLike,
    xyt: string,
    token: string,
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarket(bytes32,address,address,address)"(
    marketFactoryId: BytesLike,
    xyt: string,
    token: string,
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarketFactory(
    marketFactoryId: BytesLike,
    marketFactoryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketFactory(bytes32,address)"(
    marketFactoryId: BytesLike,
    marketFactoryAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allMarketsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "allMarketsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  curveShiftBlockDelta(overrides?: CallOverrides): Promise<BigNumber>;

  "curveShiftBlockDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

  expiryDivisor(overrides?: CallOverrides): Promise<BigNumber>;

  "expiryDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

  forgeFee(overrides?: CallOverrides): Promise<BigNumber>;

  "forgeFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  getForgeAddress(
    forgeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getForgeAddress(bytes32)"(
    forgeId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarket(
    marketFactoryId: BytesLike,
    xyt: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarket(bytes32,address,address)"(
    marketFactoryId: BytesLike,
    xyt: string,
    token: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketByIndex(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketByIndex(uint256)"(
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketFactoryAddress(
    marketFactoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketFactoryAddress(bytes32)"(
    marketFactoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMarketFromKey(
    xyt: string,
    token: string,
    marketFactoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  "getMarketFromKey(address,address,bytes32)"(
    xyt: string,
    token: string,
    marketFactoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getPendleYieldTokens(
    forgeId: BytesLike,
    underlyingYieldToken: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { ot: string; xyt: string }>;

  "getPendleYieldTokens(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingYieldToken: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { ot: string; xyt: string }>;

  interestUpdateRateDeltaForMarket(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "interestUpdateRateDeltaForMarket()"(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isMarket(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isMarket(address)"(
    _addr: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidOT(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidOT(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isValidXYT(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "isValidXYT(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isXyt(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  "isXyt(address)"(_addr: string, overrides?: CallOverrides): Promise<boolean>;

  lockDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  "lockDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  "lockNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

  otTokens(
    forgeId: BytesLike,
    underlyingYieldToken: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "otTokens(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingYieldToken: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  pausingManager(overrides?: CallOverrides): Promise<string>;

  "pausingManager()"(overrides?: CallOverrides): Promise<string>;

  protocolSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

  "protocolSwapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setCurveShiftBlockDelta(
    _blockDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setCurveShiftBlockDelta(uint256)"(
    _blockDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExpiryDivisor(
    _expiryDivisor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setExpiryDivisor(uint256)"(
    _expiryDivisor: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeFactoryValidity(
    _forgeId: BytesLike,
    _marketFactoryId: BytesLike,
    _valid: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeFactoryValidity(bytes32,bytes32,bool)"(
    _forgeId: BytesLike,
    _marketFactoryId: BytesLike,
    _valid: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeFee(
    _forgeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeFee(uint256)"(
    _forgeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInterestUpdateRateDeltaForMarket(
    _interestUpdateRateDeltaForMarket: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setInterestUpdateRateDeltaForMarket(uint256)"(
    _interestUpdateRateDeltaForMarket: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLockParams(
    _lockNumerator: BigNumberish,
    _lockDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLockParams(uint256,uint256)"(
    _lockNumerator: BigNumberish,
    _lockDenominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketFees(
    _swapFee: BigNumberish,
    _protocolSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketFees(uint256,uint256)"(
    _swapFee: BigNumberish,
    _protocolSwapFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setTreasury(
    newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setTreasury(address)"(
    newTreasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  storeTokens(
    forgeId: BytesLike,
    ot: string,
    xyt: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "storeTokens(bytes32,address,address,address,uint256)"(
    forgeId: BytesLike,
    ot: string,
    xyt: string,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<BigNumber>;

  "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

  treasury(overrides?: CallOverrides): Promise<string>;

  "treasury()"(overrides?: CallOverrides): Promise<string>;

  validForgeFactoryPair(
    _forgeId: BytesLike,
    _marketFactoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "validForgeFactoryPair(bytes32,bytes32)"(
    _forgeId: BytesLike,
    _marketFactoryId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  xytTokens(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "xytTokens(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addForge(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addForge(bytes32,address)"(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMarket(bytes32,address,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    addMarketFactory(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "addMarketFactory(bytes32,address)"(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allMarketsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allMarketsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "curveShiftBlockDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiryDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    forgeFee(overrides?: CallOverrides): Promise<BigNumber>;

    "forgeFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForgeAddress(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getForgeAddress(bytes32)"(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarket(bytes32,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketFactoryAddress(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketFactoryAddress(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMarketFromKey(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    "getMarketFromKey(address,address,bytes32)"(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getPendleYieldTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "getPendleYieldTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    interestUpdateRateDeltaForMarket(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interestUpdateRateDeltaForMarket()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarket(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isMarket(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidOT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidOT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isValidXYT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "isValidXYT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isXyt(_addr: string, overrides?: CallOverrides): Promise<boolean>;

    "isXyt(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "lockDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "lockNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    otTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "otTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    pausingManager(overrides?: CallOverrides): Promise<string>;

    "pausingManager()"(overrides?: CallOverrides): Promise<string>;

    protocolSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolSwapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setCurveShiftBlockDelta(
      _blockDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setCurveShiftBlockDelta(uint256)"(
      _blockDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setExpiryDivisor(
      _expiryDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setExpiryDivisor(uint256)"(
      _expiryDivisor: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeFactoryValidity(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeFactoryValidity(bytes32,bytes32,bool)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeFee(
      _forgeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeFee(uint256)"(
      _forgeFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setInterestUpdateRateDeltaForMarket(uint256)"(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setLockParams(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLockParams(uint256,uint256)"(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketFees(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketFees(uint256,uint256)"(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setTreasury(newTreasury: string, overrides?: CallOverrides): Promise<void>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: CallOverrides
    ): Promise<void>;

    storeTokens(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "storeTokens(bytes32,address,address,address,uint256)"(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<string>;

    "treasury()"(overrides?: CallOverrides): Promise<string>;

    validForgeFactoryPair(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "validForgeFactoryPair(bytes32,bytes32)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xytTokens(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "xytTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    CurveShiftBlockDeltaSet(
      _blockDelta: null
    ): TypedEventFilter<[BigNumber], { _blockDelta: BigNumber }>;

    ExpiryDivisorSet(
      expiryDivisor: null
    ): TypedEventFilter<[BigNumber], { expiryDivisor: BigNumber }>;

    ForgeAdded(
      forgeId: BytesLike | null,
      forgeAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { forgeId: string; forgeAddress: string }
    >;

    ForgeFactoryValiditySet(
      _forgeId: null,
      _marketFactoryId: null,
      _valid: null
    ): TypedEventFilter<
      [string, string, boolean],
      { _forgeId: string; _marketFactoryId: string; _valid: boolean }
    >;

    ForgeFeeSet(
      forgeFee: null
    ): TypedEventFilter<[BigNumber], { forgeFee: BigNumber }>;

    InterestUpdateRateDeltaForMarketSet(
      interestUpdateRateDeltaForMarket: null
    ): TypedEventFilter<
      [BigNumber],
      { interestUpdateRateDeltaForMarket: BigNumber }
    >;

    LockParamsSet(
      lockNumerator: null,
      lockDenominator: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { lockNumerator: BigNumber; lockDenominator: BigNumber }
    >;

    MarketFeesSet(
      _swapFee: null,
      _protocolSwapFee: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { _swapFee: BigNumber; _protocolSwapFee: BigNumber }
    >;

    MarketPairAdded(
      market: string | null,
      xyt: string | null,
      token: string | null
    ): TypedEventFilter<
      [string, string, string],
      { market: string; xyt: string; token: string }
    >;

    NewMarketFactory(
      marketFactoryId: BytesLike | null,
      marketFactoryAddress: string | null
    ): TypedEventFilter<
      [string, string],
      { marketFactoryId: string; marketFactoryAddress: string }
    >;

    TreasurySet(
      treasury: null
    ): TypedEventFilter<[string], { treasury: string }>;
  };

  estimateGas: {
    addForge(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addForge(bytes32,address)"(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarket(bytes32,address,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarketFactory(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketFactory(bytes32,address)"(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allMarketsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "allMarketsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    curveShiftBlockDelta(overrides?: CallOverrides): Promise<BigNumber>;

    "curveShiftBlockDelta()"(overrides?: CallOverrides): Promise<BigNumber>;

    expiryDivisor(overrides?: CallOverrides): Promise<BigNumber>;

    "expiryDivisor()"(overrides?: CallOverrides): Promise<BigNumber>;

    forgeFee(overrides?: CallOverrides): Promise<BigNumber>;

    "forgeFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    getForgeAddress(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getForgeAddress(bytes32)"(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarket(bytes32,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFactoryAddress(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketFactoryAddress(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMarketFromKey(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getMarketFromKey(address,address,bytes32)"(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendleYieldTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendleYieldTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    interestUpdateRateDeltaForMarket(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "interestUpdateRateDeltaForMarket()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMarket(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isMarket(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidOT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidOT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isValidXYT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "isValidXYT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isXyt(_addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isXyt(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    "lockDenominator()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    "lockNumerator()"(overrides?: CallOverrides): Promise<BigNumber>;

    otTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "otTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pausingManager(overrides?: CallOverrides): Promise<BigNumber>;

    "pausingManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    protocolSwapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "protocolSwapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setCurveShiftBlockDelta(
      _blockDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setCurveShiftBlockDelta(uint256)"(
      _blockDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExpiryDivisor(
      _expiryDivisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setExpiryDivisor(uint256)"(
      _expiryDivisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeFactoryValidity(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeFactoryValidity(bytes32,bytes32,bool)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeFee(
      _forgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeFee(uint256)"(
      _forgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setInterestUpdateRateDeltaForMarket(uint256)"(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLockParams(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLockParams(uint256,uint256)"(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketFees(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketFees(uint256,uint256)"(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    storeTokens(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "storeTokens(bytes32,address,address,address,uint256)"(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    "swapFee()"(overrides?: CallOverrides): Promise<BigNumber>;

    treasury(overrides?: CallOverrides): Promise<BigNumber>;

    "treasury()"(overrides?: CallOverrides): Promise<BigNumber>;

    validForgeFactoryPair(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validForgeFactoryPair(bytes32,bytes32)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    xytTokens(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "xytTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addForge(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addForge(bytes32,address)"(
      forgeId: BytesLike,
      forgeAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarket(bytes32,address,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarketFactory(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketFactory(bytes32,address)"(
      marketFactoryId: BytesLike,
      marketFactoryAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allMarketsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "allMarketsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    curveShiftBlockDelta(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "curveShiftBlockDelta()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    expiryDivisor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiryDivisor()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    forgeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forgeFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getForgeAddress(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getForgeAddress(bytes32)"(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarket(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarket(bytes32,address,address)"(
      marketFactoryId: BytesLike,
      xyt: string,
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketByIndex(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketByIndex(uint256)"(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketFactoryAddress(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketFactoryAddress(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMarketFromKey(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getMarketFromKey(address,address,bytes32)"(
      xyt: string,
      token: string,
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendleYieldTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendleYieldTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    interestUpdateRateDeltaForMarket(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "interestUpdateRateDeltaForMarket()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMarket(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isMarket(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidOT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidOT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isValidXYT(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isValidXYT(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isXyt(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isXyt(address)"(
      _addr: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockDenominator()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockNumerator()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    otTokens(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "otTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingYieldToken: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pausingManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    protocolSwapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "protocolSwapFee()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCurveShiftBlockDelta(
      _blockDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setCurveShiftBlockDelta(uint256)"(
      _blockDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExpiryDivisor(
      _expiryDivisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setExpiryDivisor(uint256)"(
      _expiryDivisor: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeFactoryValidity(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeFactoryValidity(bytes32,bytes32,bool)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      _valid: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeFee(
      _forgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeFee(uint256)"(
      _forgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInterestUpdateRateDeltaForMarket(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setInterestUpdateRateDeltaForMarket(uint256)"(
      _interestUpdateRateDeltaForMarket: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLockParams(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLockParams(uint256,uint256)"(
      _lockNumerator: BigNumberish,
      _lockDenominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketFees(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketFees(uint256,uint256)"(
      _swapFee: BigNumberish,
      _protocolSwapFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setTreasury(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setTreasury(address)"(
      newTreasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    storeTokens(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "storeTokens(bytes32,address,address,address,uint256)"(
      forgeId: BytesLike,
      ot: string,
      xyt: string,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "swapFee()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "treasury()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validForgeFactoryPair(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validForgeFactoryPair(bytes32,bytes32)"(
      _forgeId: BytesLike,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    xytTokens(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "xytTokens(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
