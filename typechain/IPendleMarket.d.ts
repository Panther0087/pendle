/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPendleMarketInterface extends ethers.utils.Interface {
  functions: {
    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addMarketLiquiditySingle(address,address,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bootstrap(address,uint256,uint256)": FunctionFragment;
    "factoryId()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "redeemLpInterests(address)": FunctionFragment;
    "removeMarketLiquidityDual(address,uint256,uint256,uint256)": FunctionFragment;
    "removeMarketLiquiditySingle(address,address,uint256,uint256)": FunctionFragment;
    "setUpEmergencyMode(address)": FunctionFragment;
    "swapExactIn(address,uint256,address,uint256)": FunctionFragment;
    "swapExactOut(address,uint256,address,uint256)": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "xyt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMarketLiquidityDual",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketLiquiditySingle",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bootstrap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factoryId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLpInterests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquidityDual",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquiditySingle",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactIn",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "xyt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addMarketLiquidityDual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factoryId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLpInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquidityDual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xyt", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "Sync(uint256,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class IPendleMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPendleMarketInterface;

  functions: {
    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarketLiquiditySingle(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factoryId(overrides?: CallOverrides): Promise<[string]>;

    "factoryId()"(overrides?: CallOverrides): Promise<[string]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    redeemLpInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarketLiquidityDual(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarketLiquiditySingle(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpEmergencyMode(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xyt(overrides?: CallOverrides): Promise<[string]>;

    "xyt()"(overrides?: CallOverrides): Promise<[string]>;
  };

  addMarketLiquidityDual(
    user: string,
    _desiredXytAmount: BigNumberish,
    _desiredTokenAmount: BigNumberish,
    _xytMinAmount: BigNumberish,
    _tokenMinAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
    user: string,
    _desiredXytAmount: BigNumberish,
    _desiredTokenAmount: BigNumberish,
    _xytMinAmount: BigNumberish,
    _tokenMinAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarketLiquiditySingle(
    user: string,
    inToken: string,
    inAmount: BigNumberish,
    minOutLp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketLiquiditySingle(address,address,uint256,uint256)"(
    user: string,
    inToken: string,
    inAmount: BigNumberish,
    minOutLp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bootstrap(
    user: string,
    initialXytLiquidity: BigNumberish,
    initialTokenLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bootstrap(address,uint256,uint256)"(
    user: string,
    initialXytLiquidity: BigNumberish,
    initialTokenLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factoryId(overrides?: CallOverrides): Promise<string>;

  "factoryId()"(overrides?: CallOverrides): Promise<string>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      xytBalance: BigNumber;
      xytWeight: BigNumber;
      tokenBalance: BigNumber;
      tokenWeight: BigNumber;
      currentBlock: BigNumber;
    }
  >;

  "getReserves()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      xytBalance: BigNumber;
      xytWeight: BigNumber;
      tokenBalance: BigNumber;
      tokenWeight: BigNumber;
      currentBlock: BigNumber;
    }
  >;

  redeemLpInterests(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemLpInterests(address)"(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarketLiquidityDual(
    user: string,
    inLp: BigNumberish,
    minOutXyt: BigNumberish,
    minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
    user: string,
    inLp: BigNumberish,
    minOutXyt: BigNumberish,
    minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarketLiquiditySingle(
    user: string,
    outToken: string,
    exactInLp: BigNumberish,
    minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
    user: string,
    outToken: string,
    exactInLp: BigNumberish,
    minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpEmergencyMode(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUpEmergencyMode(address)"(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactIn(
    inToken: string,
    inAmount: BigNumberish,
    outToken: string,
    minOutAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactIn(address,uint256,address,uint256)"(
    inToken: string,
    inAmount: BigNumberish,
    outToken: string,
    minOutAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactOut(
    inToken: string,
    maxInAmount: BigNumberish,
    outToken: string,
    outAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactOut(address,uint256,address,uint256)"(
    inToken: string,
    maxInAmount: BigNumberish,
    outToken: string,
    outAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xyt(overrides?: CallOverrides): Promise<string>;

  "xyt()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        lpOut: BigNumber;
      }
    >;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        lpOut: BigNumber;
      }
    >;

    addMarketLiquiditySingle(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    factoryId(overrides?: CallOverrides): Promise<string>;

    "factoryId()"(overrides?: CallOverrides): Promise<string>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    redeemLpInterests(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    removeMarketLiquiditySingle(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    setUpEmergencyMode(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        outAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        outAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        inAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        inAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    xyt(overrides?: CallOverrides): Promise<string>;

    "xyt()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Sync(
      reserve0: null,
      weight0: null,
      reserve1: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { reserve0: BigNumber; weight0: BigNumber; reserve1: BigNumber }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarketLiquiditySingle(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factoryId(overrides?: CallOverrides): Promise<BigNumber>;

    "factoryId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemLpInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarketLiquiditySingle(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpEmergencyMode(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xyt(overrides?: CallOverrides): Promise<BigNumber>;

    "xyt()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarketLiquiditySingle(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      inToken: string,
      inAmount: BigNumberish,
      minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factoryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factoryId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemLpInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketLiquidityDual(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      inLp: BigNumberish,
      minOutXyt: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketLiquiditySingle(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      outToken: string,
      exactInLp: BigNumberish,
      minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xyt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xyt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
