/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPendlePausingManagerInterface extends ethers.utils.Interface {
  functions: {
    "applyForgeHandlerChange()": FunctionFragment;
    "applyLiqMiningHandlerChange()": FunctionFragment;
    "applyMarketHandlerChange()": FunctionFragment;
    "checkLiqMiningStatus(address)": FunctionFragment;
    "checkMarketStatus(bytes32,address)": FunctionFragment;
    "checkYieldContractStatus(bytes32,address,uint256)": FunctionFragment;
    "forgeEmergencyHandler()": FunctionFragment;
    "isPausingAdmin(address)": FunctionFragment;
    "liqMiningEmergencyHandler()": FunctionFragment;
    "lockForgeHandlerPermanently()": FunctionFragment;
    "lockLiqMiningHandlerPermanently()": FunctionFragment;
    "lockMarketHandlerPermanently()": FunctionFragment;
    "lockPausingManagerPermanently()": FunctionFragment;
    "marketEmergencyHandler()": FunctionFragment;
    "permForgeHandlerLocked()": FunctionFragment;
    "permLiqMiningHandlerLocked()": FunctionFragment;
    "permLocked()": FunctionFragment;
    "permMarketHandlerLocked()": FunctionFragment;
    "requestForgeHandlerChange(address)": FunctionFragment;
    "requestLiqMiningHandlerChange(address)": FunctionFragment;
    "requestMarketHandlerChange(address)": FunctionFragment;
    "setForgeAssetExpiryLocked(bytes32,address,uint256)": FunctionFragment;
    "setForgeAssetExpiryPaused(bytes32,address,uint256,bool)": FunctionFragment;
    "setForgeAssetLocked(bytes32,address)": FunctionFragment;
    "setForgeAssetPaused(bytes32,address,bool)": FunctionFragment;
    "setForgeLocked(bytes32)": FunctionFragment;
    "setForgePaused(bytes32,bool)": FunctionFragment;
    "setLiqMiningLocked(address)": FunctionFragment;
    "setLiqMiningPaused(address,bool)": FunctionFragment;
    "setMarketFactoryLocked(bytes32)": FunctionFragment;
    "setMarketFactoryPaused(bytes32,bool)": FunctionFragment;
    "setMarketLocked(bytes32,address)": FunctionFragment;
    "setMarketPaused(bytes32,address,bool)": FunctionFragment;
    "setPausingAdmin(address,bool)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "applyForgeHandlerChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyLiqMiningHandlerChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "applyMarketHandlerChange",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkLiqMiningStatus",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkMarketStatus",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkYieldContractStatus",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "forgeEmergencyHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPausingAdmin",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "liqMiningEmergencyHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockForgeHandlerPermanently",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockLiqMiningHandlerPermanently",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockMarketHandlerPermanently",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockPausingManagerPermanently",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "marketEmergencyHandler",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permForgeHandlerLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permLiqMiningHandlerLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permMarketHandlerLocked",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestForgeHandlerChange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLiqMiningHandlerChange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "requestMarketHandlerChange",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeAssetExpiryLocked",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeAssetExpiryPaused",
    values: [BytesLike, string, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeAssetLocked",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeAssetPaused",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgeLocked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setForgePaused",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiqMiningLocked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setLiqMiningPaused",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFactoryLocked",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketFactoryPaused",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketLocked",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMarketPaused",
    values: [BytesLike, string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPausingAdmin",
    values: [string, boolean]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyForgeHandlerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyLiqMiningHandlerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "applyMarketHandlerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkLiqMiningStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkMarketStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkYieldContractStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "forgeEmergencyHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPausingAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liqMiningEmergencyHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockForgeHandlerPermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockLiqMiningHandlerPermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockMarketHandlerPermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockPausingManagerPermanently",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "marketEmergencyHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permForgeHandlerLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permLiqMiningHandlerLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "permLocked", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permMarketHandlerLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestForgeHandlerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestLiqMiningHandlerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestMarketHandlerChange",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeAssetExpiryLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeAssetExpiryPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeAssetLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeAssetPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgeLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setForgePaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiqMiningLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setLiqMiningPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFactoryLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketFactoryPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketLocked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMarketPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPausingAdmin",
    data: BytesLike
  ): Result;

  events: {
    "AddPausingAdmin(address)": EventFragment;
    "ForgeEmergencyHandlerSet(address)": EventFragment;
    "ForgeHandlerLocked()": EventFragment;
    "LiqMiningEmergencyHandlerSet(address)": EventFragment;
    "LiqMiningHandlerLocked()": EventFragment;
    "MarketEmergencyHandlerSet(address)": EventFragment;
    "MarketHandlerLocked()": EventFragment;
    "PausingManagerLocked()": EventFragment;
    "PendingForgeEmergencyHandler(address)": EventFragment;
    "PendingLiqMiningEmergencyHandler(address)": EventFragment;
    "PendingMarketEmergencyHandler(address)": EventFragment;
    "RemovePausingAdmin(address)": EventFragment;
    "SetForgeAssetExpiryLocked(bytes32,address,uint256)": EventFragment;
    "SetForgeAssetExpiryPaused(bytes32,address,uint256,bool)": EventFragment;
    "SetForgeAssetLocked(bytes32,address)": EventFragment;
    "SetForgeAssetPaused(bytes32,address,bool)": EventFragment;
    "SetForgeLocked(bytes32)": EventFragment;
    "SetForgePaused(bytes32,bool)": EventFragment;
    "SetLiqMiningLocked(address)": EventFragment;
    "SetLiqMiningPaused(address,bool)": EventFragment;
    "SetMarketFactoryLocked(bytes32)": EventFragment;
    "SetMarketFactoryPaused(bytes32,bool)": EventFragment;
    "SetMarketLocked(bytes32,address)": EventFragment;
    "SetMarketPaused(bytes32,address,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddPausingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeEmergencyHandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeHandlerLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "LiqMiningEmergencyHandlerSet"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiqMiningHandlerLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketEmergencyHandlerSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketHandlerLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PausingManagerLocked"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingForgeEmergencyHandler"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingLiqMiningEmergencyHandler"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "PendingMarketEmergencyHandler"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovePausingAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeAssetExpiryLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeAssetExpiryPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeAssetLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeAssetPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgeLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetForgePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiqMiningLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetLiqMiningPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarketFactoryLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarketFactoryPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarketLocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetMarketPaused"): EventFragment;
}

export class IPendlePausingManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPendlePausingManagerInterface;

  functions: {
    applyForgeHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "applyForgeHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyLiqMiningHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "applyLiqMiningHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    applyMarketHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "applyMarketHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkLiqMiningStatus(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "checkLiqMiningStatus(address)"(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkMarketStatus(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "checkMarketStatus(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkYieldContractStatus(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "checkYieldContractStatus(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    forgeEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    "forgeEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    isPausingAdmin(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    "isPausingAdmin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    liqMiningEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    "liqMiningEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    lockForgeHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockForgeHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockLiqMiningHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockLiqMiningHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockMarketHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockMarketHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockPausingManagerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lockPausingManagerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    marketEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    "marketEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    permForgeHandlerLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "permForgeHandlerLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    permLiqMiningHandlerLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "permLiqMiningHandlerLocked()"(
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    permLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "permLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    permMarketHandlerLocked(overrides?: CallOverrides): Promise<[boolean]>;

    "permMarketHandlerLocked()"(overrides?: CallOverrides): Promise<[boolean]>;

    requestForgeHandlerChange(
      _pendingForgeHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestForgeHandlerChange(address)"(
      _pendingForgeHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestLiqMiningHandlerChange(
      _pendingLiqMiningHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestLiqMiningHandlerChange(address)"(
      _pendingLiqMiningHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    requestMarketHandlerChange(
      _pendingMarketHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "requestMarketHandlerChange(address)"(
      _pendingMarketHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeAssetExpiryLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeAssetExpiryLocked(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeAssetExpiryPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeAssetExpiryPaused(bytes32,address,uint256,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeAssetLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeAssetLocked(bytes32,address)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeAssetPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeAssetPaused(bytes32,address,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgeLocked(
      forgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgeLocked(bytes32)"(
      forgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setForgePaused(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setForgePaused(bytes32,bool)"(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiqMiningLocked(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLiqMiningLocked(address)"(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiqMiningPaused(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setLiqMiningPaused(address,bool)"(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketFactoryLocked(
      marketFactoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketFactoryLocked(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketFactoryPaused(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketFactoryPaused(bytes32,bool)"(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketLocked(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketLocked(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMarketPaused(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setMarketPaused(bytes32,address,bool)"(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPausingAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setPausingAdmin(address,bool)"(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  applyForgeHandlerChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "applyForgeHandlerChange()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyLiqMiningHandlerChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "applyLiqMiningHandlerChange()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  applyMarketHandlerChange(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "applyMarketHandlerChange()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkLiqMiningStatus(
    liqMiningContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "checkLiqMiningStatus(address)"(
    liqMiningContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkMarketStatus(
    marketFactoryId: BytesLike,
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "checkMarketStatus(bytes32,address)"(
    marketFactoryId: BytesLike,
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkYieldContractStatus(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "checkYieldContractStatus(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  forgeEmergencyHandler(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      handler: string;
      pendingHandler: string;
      timelockDeadline: BigNumber;
    }
  >;

  "forgeEmergencyHandler()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      handler: string;
      pendingHandler: string;
      timelockDeadline: BigNumber;
    }
  >;

  isPausingAdmin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "isPausingAdmin(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  liqMiningEmergencyHandler(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      handler: string;
      pendingHandler: string;
      timelockDeadline: BigNumber;
    }
  >;

  "liqMiningEmergencyHandler()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      handler: string;
      pendingHandler: string;
      timelockDeadline: BigNumber;
    }
  >;

  lockForgeHandlerPermanently(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockForgeHandlerPermanently()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockLiqMiningHandlerPermanently(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockLiqMiningHandlerPermanently()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockMarketHandlerPermanently(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockMarketHandlerPermanently()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockPausingManagerPermanently(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lockPausingManagerPermanently()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  marketEmergencyHandler(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      handler: string;
      pendingHandler: string;
      timelockDeadline: BigNumber;
    }
  >;

  "marketEmergencyHandler()"(
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber] & {
      handler: string;
      pendingHandler: string;
      timelockDeadline: BigNumber;
    }
  >;

  permForgeHandlerLocked(overrides?: CallOverrides): Promise<boolean>;

  "permForgeHandlerLocked()"(overrides?: CallOverrides): Promise<boolean>;

  permLiqMiningHandlerLocked(overrides?: CallOverrides): Promise<boolean>;

  "permLiqMiningHandlerLocked()"(overrides?: CallOverrides): Promise<boolean>;

  permLocked(overrides?: CallOverrides): Promise<boolean>;

  "permLocked()"(overrides?: CallOverrides): Promise<boolean>;

  permMarketHandlerLocked(overrides?: CallOverrides): Promise<boolean>;

  "permMarketHandlerLocked()"(overrides?: CallOverrides): Promise<boolean>;

  requestForgeHandlerChange(
    _pendingForgeHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestForgeHandlerChange(address)"(
    _pendingForgeHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestLiqMiningHandlerChange(
    _pendingLiqMiningHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestLiqMiningHandlerChange(address)"(
    _pendingLiqMiningHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  requestMarketHandlerChange(
    _pendingMarketHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "requestMarketHandlerChange(address)"(
    _pendingMarketHandler: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeAssetExpiryLocked(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeAssetExpiryLocked(bytes32,address,uint256)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeAssetExpiryPaused(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeAssetExpiryPaused(bytes32,address,uint256,bool)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    expiry: BigNumberish,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeAssetLocked(
    forgeId: BytesLike,
    underlyingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeAssetLocked(bytes32,address)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeAssetPaused(
    forgeId: BytesLike,
    underlyingAsset: string,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeAssetPaused(bytes32,address,bool)"(
    forgeId: BytesLike,
    underlyingAsset: string,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgeLocked(
    forgeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgeLocked(bytes32)"(
    forgeId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setForgePaused(
    forgeId: BytesLike,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setForgePaused(bytes32,bool)"(
    forgeId: BytesLike,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiqMiningLocked(
    liqMiningContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLiqMiningLocked(address)"(
    liqMiningContract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiqMiningPaused(
    liqMiningContract: string,
    settingToPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setLiqMiningPaused(address,bool)"(
    liqMiningContract: string,
    settingToPaused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketFactoryLocked(
    marketFactoryId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketFactoryLocked(bytes32)"(
    marketFactoryId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketFactoryPaused(
    marketFactoryId: BytesLike,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketFactoryPaused(bytes32,bool)"(
    marketFactoryId: BytesLike,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketLocked(
    marketFactoryId: BytesLike,
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketLocked(bytes32,address)"(
    marketFactoryId: BytesLike,
    market: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMarketPaused(
    marketFactoryId: BytesLike,
    market: string,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setMarketPaused(bytes32,address,bool)"(
    marketFactoryId: BytesLike,
    market: string,
    paused: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPausingAdmin(
    admin: string,
    isAdmin: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setPausingAdmin(address,bool)"(
    admin: string,
    isAdmin: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    applyForgeHandlerChange(overrides?: CallOverrides): Promise<void>;

    "applyForgeHandlerChange()"(overrides?: CallOverrides): Promise<void>;

    applyLiqMiningHandlerChange(overrides?: CallOverrides): Promise<void>;

    "applyLiqMiningHandlerChange()"(overrides?: CallOverrides): Promise<void>;

    applyMarketHandlerChange(overrides?: CallOverrides): Promise<void>;

    "applyMarketHandlerChange()"(overrides?: CallOverrides): Promise<void>;

    checkLiqMiningStatus(
      liqMiningContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { _paused: boolean; _locked: boolean }>;

    "checkLiqMiningStatus(address)"(
      liqMiningContract: string,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { _paused: boolean; _locked: boolean }>;

    checkMarketStatus(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { _paused: boolean; _locked: boolean }>;

    "checkMarketStatus(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { _paused: boolean; _locked: boolean }>;

    checkYieldContractStatus(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { _paused: boolean; _locked: boolean }>;

    "checkYieldContractStatus(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { _paused: boolean; _locked: boolean }>;

    forgeEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    "forgeEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    isPausingAdmin(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "isPausingAdmin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    liqMiningEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    "liqMiningEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    lockForgeHandlerPermanently(overrides?: CallOverrides): Promise<void>;

    "lockForgeHandlerPermanently()"(overrides?: CallOverrides): Promise<void>;

    lockLiqMiningHandlerPermanently(overrides?: CallOverrides): Promise<void>;

    "lockLiqMiningHandlerPermanently()"(
      overrides?: CallOverrides
    ): Promise<void>;

    lockMarketHandlerPermanently(overrides?: CallOverrides): Promise<void>;

    "lockMarketHandlerPermanently()"(overrides?: CallOverrides): Promise<void>;

    lockPausingManagerPermanently(overrides?: CallOverrides): Promise<void>;

    "lockPausingManagerPermanently()"(overrides?: CallOverrides): Promise<void>;

    marketEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    "marketEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        handler: string;
        pendingHandler: string;
        timelockDeadline: BigNumber;
      }
    >;

    permForgeHandlerLocked(overrides?: CallOverrides): Promise<boolean>;

    "permForgeHandlerLocked()"(overrides?: CallOverrides): Promise<boolean>;

    permLiqMiningHandlerLocked(overrides?: CallOverrides): Promise<boolean>;

    "permLiqMiningHandlerLocked()"(overrides?: CallOverrides): Promise<boolean>;

    permLocked(overrides?: CallOverrides): Promise<boolean>;

    "permLocked()"(overrides?: CallOverrides): Promise<boolean>;

    permMarketHandlerLocked(overrides?: CallOverrides): Promise<boolean>;

    "permMarketHandlerLocked()"(overrides?: CallOverrides): Promise<boolean>;

    requestForgeHandlerChange(
      _pendingForgeHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestForgeHandlerChange(address)"(
      _pendingForgeHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestLiqMiningHandlerChange(
      _pendingLiqMiningHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestLiqMiningHandlerChange(address)"(
      _pendingLiqMiningHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    requestMarketHandlerChange(
      _pendingMarketHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "requestMarketHandlerChange(address)"(
      _pendingMarketHandler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeAssetExpiryLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeAssetExpiryLocked(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeAssetExpiryPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeAssetExpiryPaused(bytes32,address,uint256,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeAssetLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeAssetLocked(bytes32,address)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeAssetPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeAssetPaused(bytes32,address,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgeLocked(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgeLocked(bytes32)"(
      forgeId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setForgePaused(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setForgePaused(bytes32,bool)"(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiqMiningLocked(
      liqMiningContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiqMiningLocked(address)"(
      liqMiningContract: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setLiqMiningPaused(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setLiqMiningPaused(address,bool)"(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketFactoryLocked(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketFactoryLocked(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketFactoryPaused(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketFactoryPaused(bytes32,bool)"(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketLocked(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketLocked(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMarketPaused(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setMarketPaused(bytes32,address,bool)"(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPausingAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setPausingAdmin(address,bool)"(
      admin: string,
      isAdmin: boolean,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    AddPausingAdmin(admin: null): TypedEventFilter<[string], { admin: string }>;

    ForgeEmergencyHandlerSet(
      forgeEmergencyHandler: null
    ): TypedEventFilter<[string], { forgeEmergencyHandler: string }>;

    ForgeHandlerLocked(): TypedEventFilter<[], {}>;

    LiqMiningEmergencyHandlerSet(
      liqMiningEmergencyHandler: null
    ): TypedEventFilter<[string], { liqMiningEmergencyHandler: string }>;

    LiqMiningHandlerLocked(): TypedEventFilter<[], {}>;

    MarketEmergencyHandlerSet(
      marketEmergencyHandler: null
    ): TypedEventFilter<[string], { marketEmergencyHandler: string }>;

    MarketHandlerLocked(): TypedEventFilter<[], {}>;

    PausingManagerLocked(): TypedEventFilter<[], {}>;

    PendingForgeEmergencyHandler(
      _pendingForgeHandler: null
    ): TypedEventFilter<[string], { _pendingForgeHandler: string }>;

    PendingLiqMiningEmergencyHandler(
      _pendingLiqMiningHandler: null
    ): TypedEventFilter<[string], { _pendingLiqMiningHandler: string }>;

    PendingMarketEmergencyHandler(
      _pendingMarketHandler: null
    ): TypedEventFilter<[string], { _pendingMarketHandler: string }>;

    RemovePausingAdmin(
      admin: null
    ): TypedEventFilter<[string], { admin: string }>;

    SetForgeAssetExpiryLocked(
      forgeId: null,
      underlyingAsset: null,
      expiry: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { forgeId: string; underlyingAsset: string; expiry: BigNumber }
    >;

    SetForgeAssetExpiryPaused(
      forgeId: null,
      underlyingAsset: null,
      expiry: null,
      settingToPaused: null
    ): TypedEventFilter<
      [string, string, BigNumber, boolean],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        settingToPaused: boolean;
      }
    >;

    SetForgeAssetLocked(
      forgeId: null,
      underlyingAsset: null
    ): TypedEventFilter<
      [string, string],
      { forgeId: string; underlyingAsset: string }
    >;

    SetForgeAssetPaused(
      forgeId: null,
      underlyingAsset: null,
      settingToPaused: null
    ): TypedEventFilter<
      [string, string, boolean],
      { forgeId: string; underlyingAsset: string; settingToPaused: boolean }
    >;

    SetForgeLocked(
      forgeId: null
    ): TypedEventFilter<[string], { forgeId: string }>;

    SetForgePaused(
      forgeId: null,
      settingToPaused: null
    ): TypedEventFilter<
      [string, boolean],
      { forgeId: string; settingToPaused: boolean }
    >;

    SetLiqMiningLocked(
      liqMiningContract: null
    ): TypedEventFilter<[string], { liqMiningContract: string }>;

    SetLiqMiningPaused(
      liqMiningContract: null,
      settingToPaused: null
    ): TypedEventFilter<
      [string, boolean],
      { liqMiningContract: string; settingToPaused: boolean }
    >;

    SetMarketFactoryLocked(
      marketFactoryId: null
    ): TypedEventFilter<[string], { marketFactoryId: string }>;

    SetMarketFactoryPaused(
      marketFactoryId: null,
      settingToPaused: null
    ): TypedEventFilter<
      [string, boolean],
      { marketFactoryId: string; settingToPaused: boolean }
    >;

    SetMarketLocked(
      marketFactoryId: null,
      market: null
    ): TypedEventFilter<
      [string, string],
      { marketFactoryId: string; market: string }
    >;

    SetMarketPaused(
      marketFactoryId: null,
      market: null,
      settingToPaused: null
    ): TypedEventFilter<
      [string, string, boolean],
      { marketFactoryId: string; market: string; settingToPaused: boolean }
    >;
  };

  estimateGas: {
    applyForgeHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "applyForgeHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyLiqMiningHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "applyLiqMiningHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    applyMarketHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "applyMarketHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkLiqMiningStatus(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "checkLiqMiningStatus(address)"(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkMarketStatus(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "checkMarketStatus(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkYieldContractStatus(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "checkYieldContractStatus(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    forgeEmergencyHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "forgeEmergencyHandler()"(overrides?: CallOverrides): Promise<BigNumber>;

    isPausingAdmin(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "isPausingAdmin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liqMiningEmergencyHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "liqMiningEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lockForgeHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockForgeHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockLiqMiningHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockLiqMiningHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockMarketHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockMarketHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockPausingManagerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lockPausingManagerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    marketEmergencyHandler(overrides?: CallOverrides): Promise<BigNumber>;

    "marketEmergencyHandler()"(overrides?: CallOverrides): Promise<BigNumber>;

    permForgeHandlerLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "permForgeHandlerLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    permLiqMiningHandlerLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "permLiqMiningHandlerLocked()"(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    permLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "permLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    permMarketHandlerLocked(overrides?: CallOverrides): Promise<BigNumber>;

    "permMarketHandlerLocked()"(overrides?: CallOverrides): Promise<BigNumber>;

    requestForgeHandlerChange(
      _pendingForgeHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestForgeHandlerChange(address)"(
      _pendingForgeHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestLiqMiningHandlerChange(
      _pendingLiqMiningHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestLiqMiningHandlerChange(address)"(
      _pendingLiqMiningHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    requestMarketHandlerChange(
      _pendingMarketHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "requestMarketHandlerChange(address)"(
      _pendingMarketHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeAssetExpiryLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeAssetExpiryLocked(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeAssetExpiryPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeAssetExpiryPaused(bytes32,address,uint256,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeAssetLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeAssetLocked(bytes32,address)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeAssetPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeAssetPaused(bytes32,address,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgeLocked(
      forgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgeLocked(bytes32)"(
      forgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setForgePaused(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setForgePaused(bytes32,bool)"(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiqMiningLocked(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLiqMiningLocked(address)"(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiqMiningPaused(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setLiqMiningPaused(address,bool)"(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketFactoryLocked(
      marketFactoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketFactoryLocked(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketFactoryPaused(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketFactoryPaused(bytes32,bool)"(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketLocked(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketLocked(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMarketPaused(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setMarketPaused(bytes32,address,bool)"(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPausingAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setPausingAdmin(address,bool)"(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyForgeHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "applyForgeHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyLiqMiningHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "applyLiqMiningHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    applyMarketHandlerChange(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "applyMarketHandlerChange()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkLiqMiningStatus(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "checkLiqMiningStatus(address)"(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkMarketStatus(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "checkMarketStatus(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkYieldContractStatus(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "checkYieldContractStatus(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    forgeEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "forgeEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPausingAdmin(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "isPausingAdmin(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liqMiningEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "liqMiningEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lockForgeHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockForgeHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockLiqMiningHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockLiqMiningHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockMarketHandlerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockMarketHandlerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockPausingManagerPermanently(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lockPausingManagerPermanently()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    marketEmergencyHandler(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketEmergencyHandler()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permForgeHandlerLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permForgeHandlerLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permLiqMiningHandlerLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permLiqMiningHandlerLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    permLocked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "permLocked()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permMarketHandlerLocked(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "permMarketHandlerLocked()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestForgeHandlerChange(
      _pendingForgeHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestForgeHandlerChange(address)"(
      _pendingForgeHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestLiqMiningHandlerChange(
      _pendingLiqMiningHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestLiqMiningHandlerChange(address)"(
      _pendingLiqMiningHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    requestMarketHandlerChange(
      _pendingMarketHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "requestMarketHandlerChange(address)"(
      _pendingMarketHandler: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeAssetExpiryLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeAssetExpiryLocked(bytes32,address,uint256)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeAssetExpiryPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeAssetExpiryPaused(bytes32,address,uint256,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      expiry: BigNumberish,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeAssetLocked(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeAssetLocked(bytes32,address)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeAssetPaused(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeAssetPaused(bytes32,address,bool)"(
      forgeId: BytesLike,
      underlyingAsset: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgeLocked(
      forgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgeLocked(bytes32)"(
      forgeId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setForgePaused(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setForgePaused(bytes32,bool)"(
      forgeId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiqMiningLocked(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLiqMiningLocked(address)"(
      liqMiningContract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiqMiningPaused(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setLiqMiningPaused(address,bool)"(
      liqMiningContract: string,
      settingToPaused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketFactoryLocked(
      marketFactoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketFactoryLocked(bytes32)"(
      marketFactoryId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketFactoryPaused(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketFactoryPaused(bytes32,bool)"(
      marketFactoryId: BytesLike,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketLocked(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketLocked(bytes32,address)"(
      marketFactoryId: BytesLike,
      market: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMarketPaused(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setMarketPaused(bytes32,address,bool)"(
      marketFactoryId: BytesLike,
      market: string,
      paused: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPausingAdmin(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setPausingAdmin(address,bool)"(
      admin: string,
      isAdmin: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
