/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockPendleAaveMarketInterface extends ethers.utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_TYPEHASH()": FunctionFragment;
    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addMarketLiquiditySingle(address,address,uint256,uint256)": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "bootstrap(address,uint256,uint256)": FunctionFragment;
    "bootstrapped()": FunctionFragment;
    "calcExactIn(tuple,tuple,uint256,uint256)": FunctionFragment;
    "calcExactOut(tuple,tuple,uint256,uint256)": FunctionFragment;
    "calcOutAmountLp(uint256,tuple,uint256,uint256)": FunctionFragment;
    "calcOutAmountToken(tuple,uint256,uint256,uint256)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "expiry()": FunctionFragment;
    "factoryId()": FunctionFragment;
    "getReserves()": FunctionFragment;
    "governanceManager()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "lastCurveShiftBlock()": FunctionFragment;
    "lastNYield()": FunctionFragment;
    "lastParamK()": FunctionFragment;
    "lockStartTime()": FunctionFragment;
    "name()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "paramL()": FunctionFragment;
    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "redeemLpInterests(address)": FunctionFragment;
    "removeMarketLiquidityDual(address,uint256,uint256,uint256)": FunctionFragment;
    "removeMarketLiquiditySingle(address,address,uint256,uint256)": FunctionFragment;
    "router()": FunctionFragment;
    "setUpEmergencyMode(address)": FunctionFragment;
    "start()": FunctionFragment;
    "swapExactIn(address,uint256,address,uint256)": FunctionFragment;
    "swapExactOut(address,uint256,address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "token()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "withdrawEther(uint256,address)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
    "xyt()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketLiquidityDual",
    values: [string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketLiquiditySingle",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "bootstrap",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapped",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calcExactIn",
    values: [
      { weight: BigNumberish; balance: BigNumberish },
      { weight: BigNumberish; balance: BigNumberish },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcExactOut",
    values: [
      { weight: BigNumberish; balance: BigNumberish },
      { weight: BigNumberish; balance: BigNumberish },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutAmountLp",
    values: [
      BigNumberish,
      { weight: BigNumberish; balance: BigNumberish },
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calcOutAmountToken",
    values: [
      { weight: BigNumberish; balance: BigNumberish },
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "expiry", values?: undefined): string;
  encodeFunctionData(functionFragment: "factoryId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "governanceManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastCurveShiftBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastNYield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastParamK",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lockStartTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "paramL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permit",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLpInterests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquidityDual",
    values: [string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquiditySingle",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUpEmergencyMode",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "swapExactIn",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [string, BigNumberish, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "xyt", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketLiquidityDual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bootstrap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapped",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutAmountLp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calcOutAmountToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "expiry", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "factoryId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastCurveShiftBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lastNYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastParamK", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockStartTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paramL", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemLpInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquidityDual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUpEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "xyt", data: BytesLike): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "EtherWithdraw(uint256,address)": EventFragment;
    "Sync(uint256,uint256,uint256)": EventFragment;
    "TokenWithdraw(address,uint256,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sync"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export class MockPendleAaveMarket extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockPendleAaveMarketInterface;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<[string]>;

    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarketLiquiditySingle(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bootstrapped(overrides?: CallOverrides): Promise<[boolean]>;

    "bootstrapped()"(overrides?: CallOverrides): Promise<[boolean]>;

    calcExactIn(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactIn: BigNumber }>;

    "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactIn: BigNumber }>;

    calcExactOut(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactOut: BigNumber }>;

    "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactOut: BigNumber }>;

    calcOutAmountLp(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactOutLp: BigNumber }>;

    "calcOutAmountLp(uint256,(uint256,uint256),uint256,uint256)"(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactOutLp: BigNumber }>;

    calcOutAmountToken(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactOutToken: BigNumber }>;

    "calcOutAmountToken((uint256,uint256),uint256,uint256,uint256)"(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { exactOutToken: BigNumber }>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    "decimals()"(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    expiry(overrides?: CallOverrides): Promise<[BigNumber]>;

    "expiry()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    factoryId(overrides?: CallOverrides): Promise<[string]>;

    "factoryId()"(overrides?: CallOverrides): Promise<[string]>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    "governanceManager()"(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastCurveShiftBlock()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastNYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastNYield()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastParamK(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastParamK()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lockStartTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lockStartTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    "name()"(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    paramL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "paramL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemLpInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarketLiquidityDual(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarketLiquiditySingle(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setUpEmergencyMode(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    "start()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    "symbol()"(overrides?: CallOverrides): Promise<[string]>;

    token(overrides?: CallOverrides): Promise<[string]>;

    "token()"(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalSupply()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    xyt(overrides?: CallOverrides): Promise<[string]>;

    "xyt()"(overrides?: CallOverrides): Promise<[string]>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

  PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

  addMarketLiquidityDual(
    user: string,
    _desiredXytAmount: BigNumberish,
    _desiredTokenAmount: BigNumberish,
    _xytMinAmount: BigNumberish,
    _tokenMinAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
    user: string,
    _desiredXytAmount: BigNumberish,
    _desiredTokenAmount: BigNumberish,
    _xytMinAmount: BigNumberish,
    _tokenMinAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarketLiquiditySingle(
    user: string,
    _inToken: string,
    _exactIn: BigNumberish,
    _minOutLp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketLiquiditySingle(address,address,uint256,uint256)"(
    user: string,
    _inToken: string,
    _exactIn: BigNumberish,
    _minOutLp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "allowance(address,address)"(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "approve(address,uint256)"(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balanceOf(address)"(
    account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  bootstrap(
    user: string,
    initialXytLiquidity: BigNumberish,
    initialTokenLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bootstrap(address,uint256,uint256)"(
    user: string,
    initialXytLiquidity: BigNumberish,
    initialTokenLiquidity: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bootstrapped(overrides?: CallOverrides): Promise<boolean>;

  "bootstrapped()"(overrides?: CallOverrides): Promise<boolean>;

  calcExactIn(
    inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    exactOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256)"(
    inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    exactOut: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcExactOut(
    inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    exactIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256)"(
    inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    exactIn: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutAmountLp(
    inAmount: BigNumberish,
    inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    swapFee: BigNumberish,
    totalSupplyLp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcOutAmountLp(uint256,(uint256,uint256),uint256,uint256)"(
    inAmount: BigNumberish,
    inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    swapFee: BigNumberish,
    totalSupplyLp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calcOutAmountToken(
    outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    totalSupplyLp: BigNumberish,
    inLp: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "calcOutAmountToken((uint256,uint256),uint256,uint256,uint256)"(
    outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
    totalSupplyLp: BigNumberish,
    inLp: BigNumberish,
    swapFee: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  "decimals()"(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "decreaseAllowance(address,uint256)"(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  expiry(overrides?: CallOverrides): Promise<BigNumber>;

  "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

  factoryId(overrides?: CallOverrides): Promise<string>;

  "factoryId()"(overrides?: CallOverrides): Promise<string>;

  getReserves(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      xytBalance: BigNumber;
      xytWeight: BigNumber;
      tokenBalance: BigNumber;
      tokenWeight: BigNumber;
      currentBlock: BigNumber;
    }
  >;

  "getReserves()"(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      xytBalance: BigNumber;
      xytWeight: BigNumber;
      tokenBalance: BigNumber;
      tokenWeight: BigNumber;
      currentBlock: BigNumber;
    }
  >;

  governanceManager(overrides?: CallOverrides): Promise<string>;

  "governanceManager()"(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "increaseAllowance(address,uint256)"(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastCurveShiftBlock(overrides?: CallOverrides): Promise<BigNumber>;

  "lastCurveShiftBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

  "lastNYield()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastParamK(overrides?: CallOverrides): Promise<BigNumber>;

  "lastParamK()"(overrides?: CallOverrides): Promise<BigNumber>;

  lockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

  "lockStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  "name()"(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "nonces(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  paramL(overrides?: CallOverrides): Promise<BigNumber>;

  "paramL()"(overrides?: CallOverrides): Promise<BigNumber>;

  permit(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    spender: string,
    value: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemLpInterests(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemLpInterests(address)"(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarketLiquidityDual(
    user: string,
    _inLp: BigNumberish,
    _minOutXyt: BigNumberish,
    _minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
    user: string,
    _inLp: BigNumberish,
    _minOutXyt: BigNumberish,
    _minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarketLiquiditySingle(
    user: string,
    _outToken: string,
    _inLp: BigNumberish,
    _minOutAmountToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
    user: string,
    _outToken: string,
    _inLp: BigNumberish,
    _minOutAmountToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setUpEmergencyMode(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUpEmergencyMode(address)"(
    spender: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  "start()"(overrides?: CallOverrides): Promise<BigNumber>;

  swapExactIn(
    inToken: string,
    inAmount: BigNumberish,
    outToken: string,
    minOutAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactIn(address,uint256,address,uint256)"(
    inToken: string,
    inAmount: BigNumberish,
    outToken: string,
    minOutAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactOut(
    inToken: string,
    maxInAmount: BigNumberish,
    outToken: string,
    outAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactOut(address,uint256,address,uint256)"(
    inToken: string,
    maxInAmount: BigNumberish,
    outToken: string,
    outAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  "symbol()"(overrides?: CallOverrides): Promise<string>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transfer(address,uint256)"(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferFrom(address,address,uint256)"(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawEther(uint256,address)"(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  xyt(overrides?: CallOverrides): Promise<string>;

  "xyt()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<string>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<string>;

    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        lpOut: BigNumber;
      }
    >;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        lpOut: BigNumber;
      }
    >;

    addMarketLiquiditySingle(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ],
        BigNumber
      ] & {
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
        exactOutLp: BigNumber;
      }
    >;

    bootstrapped(overrides?: CallOverrides): Promise<boolean>;

    "bootstrapped()"(overrides?: CallOverrides): Promise<boolean>;

    calcExactIn(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcExactOut(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutAmountLp(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutAmountLp(uint256,(uint256,uint256),uint256,uint256)"(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutAmountToken(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutAmountToken((uint256,uint256),uint256,uint256,uint256)"(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    "decimals()"(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    factoryId(overrides?: CallOverrides): Promise<string>;

    "factoryId()"(overrides?: CallOverrides): Promise<string>;

    getReserves(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    "getReserves()"(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        xytBalance: BigNumber;
        xytWeight: BigNumber;
        tokenBalance: BigNumber;
        tokenWeight: BigNumber;
        currentBlock: BigNumber;
      }
    >;

    governanceManager(overrides?: CallOverrides): Promise<string>;

    "governanceManager()"(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCurveShiftBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

    "lastNYield()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastParamK(overrides?: CallOverrides): Promise<BigNumber>;

    "lastParamK()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    "name()"(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paramL(overrides?: CallOverrides): Promise<BigNumber>;

    "paramL()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemLpInterests(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    removeMarketLiquiditySingle(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
        [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
      ]
    >;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setUpEmergencyMode(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: CallOverrides
    ): Promise<void>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    "start()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        outAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        outAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        inAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ]
      ] & {
        inAmount: BigNumber;
        transfers: [
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean },
          [BigNumber, boolean] & { amount: BigNumber; isOut: boolean }
        ];
      }
    >;

    symbol(overrides?: CallOverrides): Promise<string>;

    "symbol()"(overrides?: CallOverrides): Promise<string>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    xyt(overrides?: CallOverrides): Promise<string>;

    "xyt()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    EtherWithdraw(
      amount: null,
      sendTo: null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; sendTo: string }
    >;

    Sync(
      reserve0: null,
      weight0: null,
      reserve1: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber],
      { reserve0: BigNumber; weight0: BigNumber; reserve1: BigNumber }
    >;

    TokenWithdraw(
      token: null,
      amount: null,
      sendTo: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; sendTo: string }
    >;

    Transfer(
      from: string | null,
      to: string | null,
      value: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    "DOMAIN_SEPARATOR()"(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    "PERMIT_TYPEHASH()"(overrides?: CallOverrides): Promise<BigNumber>;

    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarketLiquiditySingle(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bootstrapped(overrides?: CallOverrides): Promise<BigNumber>;

    "bootstrapped()"(overrides?: CallOverrides): Promise<BigNumber>;

    calcExactIn(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcExactOut(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutAmountLp(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutAmountLp(uint256,(uint256,uint256),uint256,uint256)"(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calcOutAmountToken(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "calcOutAmountToken((uint256,uint256),uint256,uint256,uint256)"(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    "decimals()"(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    expiry(overrides?: CallOverrides): Promise<BigNumber>;

    "expiry()"(overrides?: CallOverrides): Promise<BigNumber>;

    factoryId(overrides?: CallOverrides): Promise<BigNumber>;

    "factoryId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;

    "getReserves()"(overrides?: CallOverrides): Promise<BigNumber>;

    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastCurveShiftBlock(overrides?: CallOverrides): Promise<BigNumber>;

    "lastCurveShiftBlock()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

    "lastNYield()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastParamK(overrides?: CallOverrides): Promise<BigNumber>;

    "lastParamK()"(overrides?: CallOverrides): Promise<BigNumber>;

    lockStartTime(overrides?: CallOverrides): Promise<BigNumber>;

    "lockStartTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    "name()"(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    paramL(overrides?: CallOverrides): Promise<BigNumber>;

    "paramL()"(overrides?: CallOverrides): Promise<BigNumber>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemLpInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarketLiquiditySingle(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUpEmergencyMode(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    "start()"(overrides?: CallOverrides): Promise<BigNumber>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    "symbol()"(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "totalSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    xyt(overrides?: CallOverrides): Promise<BigNumber>;

    "xyt()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "DOMAIN_SEPARATOR()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    PERMIT_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "PERMIT_TYPEHASH()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addMarketLiquidityDual(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketLiquidityDual(address,uint256,uint256,uint256,uint256)"(
      user: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarketLiquiditySingle(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _inToken: string,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "allowance(address,address)"(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "approve(address,uint256)"(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balanceOf(address)"(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    bootstrap(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bootstrap(address,uint256,uint256)"(
      user: string,
      initialXytLiquidity: BigNumberish,
      initialTokenLiquidity: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bootstrapped(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "bootstrapped()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calcExactIn(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcExactIn((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactOut: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcExactOut(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcExactOut((uint256,uint256),(uint256,uint256),uint256,uint256)"(
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      exactIn: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutAmountLp(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcOutAmountLp(uint256,(uint256,uint256),uint256,uint256)"(
      inAmount: BigNumberish,
      inTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      swapFee: BigNumberish,
      totalSupplyLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calcOutAmountToken(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "calcOutAmountToken((uint256,uint256),uint256,uint256,uint256)"(
      outTokenReserve: { weight: BigNumberish; balance: BigNumberish },
      totalSupplyLp: BigNumberish,
      inLp: BigNumberish,
      swapFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "decimals()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "decreaseAllowance(address,uint256)"(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    expiry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "expiry()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    factoryId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "factoryId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReserves()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governanceManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "increaseAllowance(address,uint256)"(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastCurveShiftBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastCurveShiftBlock()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastNYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastNYield()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastParamK(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastParamK()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockStartTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lockStartTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "name()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "nonces(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permit(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      spender: string,
      value: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemLpInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemLpInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketLiquidityDual(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquidityDual(address,uint256,uint256,uint256)"(
      user: string,
      _inLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketLiquiditySingle(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquiditySingle(address,address,uint256,uint256)"(
      user: string,
      _outToken: string,
      _inLp: BigNumberish,
      _minOutAmountToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUpEmergencyMode(address)"(
      spender: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "start()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    swapExactIn(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactIn(address,uint256,address,uint256)"(
      inToken: string,
      inAmount: BigNumberish,
      outToken: string,
      minOutAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOut(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactOut(address,uint256,address,uint256)"(
      inToken: string,
      maxInAmount: BigNumberish,
      outToken: string,
      outAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "symbol()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transfer(address,uint256)"(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferFrom(address,address,uint256)"(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    xyt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "xyt()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
