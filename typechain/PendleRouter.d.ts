/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PendleRouterInterface extends ethers.utils.Interface {
  functions: {
    "addMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "addMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)": FunctionFragment;
    "bootstrapMarket(bytes32,address,address,uint256,uint256)": FunctionFragment;
    "createMarket(bytes32,address,address)": FunctionFragment;
    "data()": FunctionFragment;
    "governanceManager()": FunctionFragment;
    "newYieldContracts(bytes32,address,uint256)": FunctionFragment;
    "redeemAfterExpiry(bytes32,address,uint256)": FunctionFragment;
    "redeemDueInterests(bytes32,address,uint256,address)": FunctionFragment;
    "redeemLpInterests(address,address)": FunctionFragment;
    "redeemUnderlying(bytes32,address,uint256,uint256)": FunctionFragment;
    "removeMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256)": FunctionFragment;
    "removeMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)": FunctionFragment;
    "renewYield(bytes32,uint256,address,uint256,uint256)": FunctionFragment;
    "swapExactIn(address,address,uint256,uint256,bytes32)": FunctionFragment;
    "swapExactOut(address,address,uint256,uint256,bytes32)": FunctionFragment;
    "tokenizeYield(bytes32,address,uint256,uint256,address)": FunctionFragment;
    "weth()": FunctionFragment;
    "withdrawEther(uint256,address)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addMarketLiquidityDual",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addMarketLiquiditySingle",
    values: [BytesLike, string, string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "bootstrapMarket",
    values: [BytesLike, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarket",
    values: [BytesLike, string, string]
  ): string;
  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "governanceManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "newYieldContracts",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAfterExpiry",
    values: [BytesLike, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterests",
    values: [BytesLike, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemLpInterests",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [BytesLike, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquidityDual",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMarketLiquiditySingle",
    values: [BytesLike, string, string, boolean, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renewYield",
    values: [BytesLike, BigNumberish, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactIn",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapExactOut",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenizeYield",
    values: [BytesLike, string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "addMarketLiquidityDual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMarketLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bootstrapMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarket",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "governanceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newYieldContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemLpInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquidityDual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMarketLiquiditySingle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "renewYield", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapExactIn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "swapExactOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenizeYield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;

  events: {
    "EtherWithdraw(uint256,address)": EventFragment;
    "Exit(address,uint256,uint256,address,uint256)": EventFragment;
    "Join(address,uint256,uint256,address,uint256)": EventFragment;
    "MarketCreated(bytes32,address,address,address)": EventFragment;
    "SwapEvent(address,address,address,uint256,uint256,address)": EventFragment;
    "TokenWithdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EtherWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Exit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Join"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SwapEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
}

export class PendleRouter extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PendleRouterInterface;

  functions: {
    addMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "addMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bootstrapMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "bootstrapMarket(bytes32,address,address,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createMarket(bytes32,address,address)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    data(overrides?: CallOverrides): Promise<[string]>;

    "data()"(overrides?: CallOverrides): Promise<[string]>;

    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    "governanceManager()"(overrides?: CallOverrides): Promise<[string]>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemAfterExpiry(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemDueInterests(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemLpInterests(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemLpInterests(address,address)"(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemUnderlying(bytes32,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renewYield(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renewYield(bytes32,uint256,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactIn(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactIn(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapExactOut(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "swapExactOut(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    "weth()"(overrides?: CallOverrides): Promise<[string]>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addMarketLiquidityDual(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _desiredXytAmount: BigNumberish,
    _desiredTokenAmount: BigNumberish,
    _xytMinAmount: BigNumberish,
    _tokenMinAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256,uint256)"(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _desiredXytAmount: BigNumberish,
    _desiredTokenAmount: BigNumberish,
    _xytMinAmount: BigNumberish,
    _tokenMinAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addMarketLiquiditySingle(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _forXyt: boolean,
    _exactIn: BigNumberish,
    _minOutLp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "addMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _forXyt: boolean,
    _exactIn: BigNumberish,
    _minOutLp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bootstrapMarket(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _initialXytLiquidity: BigNumberish,
    _initialTokenLiquidity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "bootstrapMarket(bytes32,address,address,uint256,uint256)"(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _initialXytLiquidity: BigNumberish,
    _initialTokenLiquidity: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createMarket(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createMarket(bytes32,address,address)"(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  data(overrides?: CallOverrides): Promise<string>;

  "data()"(overrides?: CallOverrides): Promise<string>;

  governanceManager(overrides?: CallOverrides): Promise<string>;

  "governanceManager()"(overrides?: CallOverrides): Promise<string>;

  newYieldContracts(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newYieldContracts(bytes32,address,uint256)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemAfterExpiry(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemAfterExpiry(bytes32,address,uint256)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemDueInterests(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemDueInterests(bytes32,address,uint256,address)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemLpInterests(
    market: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemLpInterests(address,address)"(
    market: string,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemUnderlying(bytes32,address,uint256,uint256)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarketLiquidityDual(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _exactInLp: BigNumberish,
    _minOutXyt: BigNumberish,
    _minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256)"(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _exactInLp: BigNumberish,
    _minOutXyt: BigNumberish,
    _minOutToken: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeMarketLiquiditySingle(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _forXyt: boolean,
    _exactInLp: BigNumberish,
    _minOutAsset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
    _marketFactoryId: BytesLike,
    _xyt: string,
    _token: string,
    _forXyt: boolean,
    _exactInLp: BigNumberish,
    _minOutAsset: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renewYield(
    _forgeId: BytesLike,
    _oldExpiry: BigNumberish,
    _underlyingAsset: string,
    _newExpiry: BigNumberish,
    _renewalRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renewYield(bytes32,uint256,address,uint256,uint256)"(
    _forgeId: BytesLike,
    _oldExpiry: BigNumberish,
    _underlyingAsset: string,
    _newExpiry: BigNumberish,
    _renewalRate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactIn(
    _tokenIn: string,
    _tokenOut: string,
    _inAmount: BigNumberish,
    _minOutAmount: BigNumberish,
    _marketFactoryId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactIn(address,address,uint256,uint256,bytes32)"(
    _tokenIn: string,
    _tokenOut: string,
    _inAmount: BigNumberish,
    _minOutAmount: BigNumberish,
    _marketFactoryId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapExactOut(
    _tokenIn: string,
    _tokenOut: string,
    _outAmount: BigNumberish,
    _maxInAmount: BigNumberish,
    _marketFactoryId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "swapExactOut(address,address,uint256,uint256,bytes32)"(
    _tokenIn: string,
    _tokenOut: string,
    _outAmount: BigNumberish,
    _maxInAmount: BigNumberish,
    _marketFactoryId: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenizeYield(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "tokenizeYield(bytes32,address,uint256,uint256,address)"(
    _forgeId: BytesLike,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  weth(overrides?: CallOverrides): Promise<string>;

  "weth()"(overrides?: CallOverrides): Promise<string>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawEther(uint256,address)"(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountXytUsed: BigNumber;
        amountTokenUsed: BigNumber;
        lpOut: BigNumber;
      }
    >;

    "addMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber] & {
        amountXytUsed: BigNumber;
        amountTokenUsed: BigNumber;
        lpOut: BigNumber;
      }
    >;

    addMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "addMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    bootstrapMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "bootstrapMarket(bytes32,address,address,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    createMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "createMarket(bytes32,address,address)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<string>;

    data(overrides?: CallOverrides): Promise<string>;

    "data()"(overrides?: CallOverrides): Promise<string>;

    governanceManager(overrides?: CallOverrides): Promise<string>;

    "governanceManager()"(overrides?: CallOverrides): Promise<string>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterests(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemLpInterests(
      market: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemLpInterests(address,address)"(
      market: string,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemUnderlying(bytes32,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactOutXyt: BigNumber;
        exactOutToken: BigNumber;
      }
    >;

    "removeMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactOutXyt: BigNumber;
        exactOutToken: BigNumber;
      }
    >;

    removeMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactOutXyt: BigNumber;
        exactOutToken: BigNumber;
      }
    >;

    "removeMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        exactOutXyt: BigNumber;
        exactOutToken: BigNumber;
      }
    >;

    renewYield(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        redeemedAmount: BigNumber;
        amountRenewed: BigNumber;
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    "renewYield(bytes32,uint256,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, string, string, BigNumber] & {
        redeemedAmount: BigNumber;
        amountRenewed: BigNumber;
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    swapExactIn(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapExactIn(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapExactOut(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "swapExactOut(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    weth(overrides?: CallOverrides): Promise<string>;

    "weth()"(overrides?: CallOverrides): Promise<string>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    EtherWithdraw(
      amount: null,
      sendTo: null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; sendTo: string }
    >;

    Exit(
      sender: string | null,
      token0Amount: null,
      token1Amount: null,
      market: null,
      exactInLp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        sender: string;
        token0Amount: BigNumber;
        token1Amount: BigNumber;
        market: string;
        exactInLp: BigNumber;
      }
    >;

    Join(
      sender: string | null,
      token0Amount: null,
      token1Amount: null,
      market: null,
      exactOutLp: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string, BigNumber],
      {
        sender: string;
        token0Amount: BigNumber;
        token1Amount: BigNumber;
        market: string;
        exactOutLp: BigNumber;
      }
    >;

    MarketCreated(
      marketFactoryId: null,
      xyt: string | null,
      token: string | null,
      market: string | null
    ): TypedEventFilter<
      [string, string, string, string],
      { marketFactoryId: string; xyt: string; token: string; market: string }
    >;

    SwapEvent(
      trader: string | null,
      inToken: null,
      outToken: null,
      exactIn: null,
      exactOut: null,
      market: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber, string],
      {
        trader: string;
        inToken: string;
        outToken: string;
        exactIn: BigNumber;
        exactOut: BigNumber;
        market: string;
      }
    >;

    TokenWithdraw(
      token: null,
      amount: null,
      sendTo: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; sendTo: string }
    >;
  };

  estimateGas: {
    addMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "addMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bootstrapMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "bootstrapMarket(bytes32,address,address,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createMarket(bytes32,address,address)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemAfterExpiry(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemDueInterests(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemLpInterests(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemLpInterests(address,address)"(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemUnderlying(bytes32,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renewYield(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renewYield(bytes32,uint256,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactIn(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactIn(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapExactOut(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "swapExactOut(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    "weth()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _desiredXytAmount: BigNumberish,
      _desiredTokenAmount: BigNumberish,
      _xytMinAmount: BigNumberish,
      _tokenMinAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "addMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactIn: BigNumberish,
      _minOutLp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bootstrapMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "bootstrapMarket(bytes32,address,address,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _initialXytLiquidity: BigNumberish,
      _initialTokenLiquidity: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createMarket(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createMarket(bytes32,address,address)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governanceManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    newYieldContracts(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newYieldContracts(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemAfterExpiry(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemAfterExpiry(bytes32,address,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemDueInterests(bytes32,address,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemLpInterests(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemLpInterests(address,address)"(
      market: string,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemUnderlying(bytes32,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketLiquidityDual(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquidityDual(bytes32,address,address,uint256,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _exactInLp: BigNumberish,
      _minOutXyt: BigNumberish,
      _minOutToken: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeMarketLiquiditySingle(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeMarketLiquiditySingle(bytes32,address,address,bool,uint256,uint256)"(
      _marketFactoryId: BytesLike,
      _xyt: string,
      _token: string,
      _forXyt: boolean,
      _exactInLp: BigNumberish,
      _minOutAsset: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renewYield(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renewYield(bytes32,uint256,address,uint256,uint256)"(
      _forgeId: BytesLike,
      _oldExpiry: BigNumberish,
      _underlyingAsset: string,
      _newExpiry: BigNumberish,
      _renewalRate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactIn(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactIn(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _inAmount: BigNumberish,
      _minOutAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapExactOut(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "swapExactOut(address,address,uint256,uint256,bytes32)"(
      _tokenIn: string,
      _tokenOut: string,
      _outAmount: BigNumberish,
      _maxInAmount: BigNumberish,
      _marketFactoryId: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenizeYield(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "tokenizeYield(bytes32,address,uint256,uint256,address)"(
      _forgeId: BytesLike,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "weth()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
