/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPendleLiquidityMiningV2Interface extends ethers.utils.Interface {
  functions: {
    "balances(address)": FunctionFragment;
    "dueInterests(address)": FunctionFragment;
    "epochDuration()": FunctionFragment;
    "fund(uint256[])": FunctionFragment;
    "lastNYield()": FunctionFragment;
    "lastParamL(address)": FunctionFragment;
    "numberOfEpochs()": FunctionFragment;
    "paramL()": FunctionFragment;
    "pendleTokenAddress()": FunctionFragment;
    "readEpochData(uint256,address)": FunctionFragment;
    "redeemDueInterests(address)": FunctionFragment;
    "redeemRewards(address)": FunctionFragment;
    "setUpEmergencyMode(address,bool)": FunctionFragment;
    "stake(address,uint256)": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "startTime()": FunctionFragment;
    "topUpRewards(uint256[],uint256[])": FunctionFragment;
    "totalStake()": FunctionFragment;
    "updateAndReadEpochData(uint256,address)": FunctionFragment;
    "vestingEpochs()": FunctionFragment;
    "withdraw(address,uint256)": FunctionFragment;
    "yieldToken()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "balances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "dueInterests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "epochDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fund",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lastNYield",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lastParamL", values: [string]): string;
  encodeFunctionData(
    functionFragment: "numberOfEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "paramL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendleTokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "readEpochData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterests",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpEmergencyMode",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "startTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "topUpRewards",
    values: [BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "totalStake",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateAndReadEpochData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "vestingEpochs",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldToken",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "balances", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastNYield", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lastParamL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paramL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendleTokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "readEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "startTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "topUpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "totalStake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateAndReadEpochData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vestingEpochs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "yieldToken", data: BytesLike): Result;

  events: {
    "Funded(uint256[],uint256)": EventFragment;
    "PendleRewardsSettled(address,uint256)": EventFragment;
    "RewardsToppedUp(uint256[],uint256[])": EventFragment;
    "Staked(address,uint256)": EventFragment;
    "Withdrawn(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Funded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PendleRewardsSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsToppedUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawn"): EventFragment;
}

export class IPendleLiquidityMiningV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPendleLiquidityMiningV2Interface;

  functions: {
    balances(user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "balances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    dueInterests(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "dueInterests(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    epochDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    "epochDuration()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    fund(
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "fund(uint256[])"(
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastNYield(overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastNYield()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastParamL(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    "lastParamL(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    numberOfEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    "numberOfEpochs()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    paramL(overrides?: CallOverrides): Promise<[BigNumber]>;

    "paramL()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    pendleTokenAddress(overrides?: CallOverrides): Promise<[string]>;

    "pendleTokenAddress()"(overrides?: CallOverrides): Promise<[string]>;

    readEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakeUnits: BigNumber;
        totalRewards: BigNumber;
        lastUpdated: BigNumber;
        stakeUnitsForUser: BigNumber;
        availableRewardsForUser: BigNumber;
      }
    >;

    "readEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakeUnits: BigNumber;
        totalRewards: BigNumber;
        lastUpdated: BigNumber;
        stakeUnitsForUser: BigNumber;
        availableRewardsForUser: BigNumber;
      }
    >;

    redeemDueInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemDueInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemRewards(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemRewards(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpEmergencyMode(
      spender: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUpEmergencyMode(address,bool)"(
      spender: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stake(
      forAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "stake(address,uint256)"(
      forAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    "stakeToken()"(overrides?: CallOverrides): Promise<[string]>;

    startTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    "startTime()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    topUpRewards(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "topUpRewards(uint256[],uint256[])"(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalStake(overrides?: CallOverrides): Promise<[BigNumber]>;

    "totalStake()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    updateAndReadEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateAndReadEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    vestingEpochs(overrides?: CallOverrides): Promise<[BigNumber]>;

    "vestingEpochs()"(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdraw(
      toAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256)"(
      toAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldToken(overrides?: CallOverrides): Promise<[string]>;

    "yieldToken()"(overrides?: CallOverrides): Promise<[string]>;
  };

  balances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

  "balances(address)"(
    user: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  dueInterests(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "dueInterests(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

  "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

  fund(
    rewards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "fund(uint256[])"(
    rewards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

  "lastNYield()"(overrides?: CallOverrides): Promise<BigNumber>;

  lastParamL(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  "lastParamL(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  numberOfEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  "numberOfEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

  paramL(overrides?: CallOverrides): Promise<BigNumber>;

  "paramL()"(overrides?: CallOverrides): Promise<BigNumber>;

  pendleTokenAddress(overrides?: CallOverrides): Promise<string>;

  "pendleTokenAddress()"(overrides?: CallOverrides): Promise<string>;

  readEpochData(
    epochId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalStakeUnits: BigNumber;
      totalRewards: BigNumber;
      lastUpdated: BigNumber;
      stakeUnitsForUser: BigNumber;
      availableRewardsForUser: BigNumber;
    }
  >;

  "readEpochData(uint256,address)"(
    epochId: BigNumberish,
    user: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      totalStakeUnits: BigNumber;
      totalRewards: BigNumber;
      lastUpdated: BigNumber;
      stakeUnitsForUser: BigNumber;
      availableRewardsForUser: BigNumber;
    }
  >;

  redeemDueInterests(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemDueInterests(address)"(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemRewards(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemRewards(address)"(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpEmergencyMode(
    spender: string,
    arg1: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUpEmergencyMode(address,bool)"(
    spender: string,
    arg1: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stake(
    forAddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "stake(address,uint256)"(
    forAddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  "stakeToken()"(overrides?: CallOverrides): Promise<string>;

  startTime(overrides?: CallOverrides): Promise<BigNumber>;

  "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

  topUpRewards(
    epochIds: BigNumberish[],
    rewards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "topUpRewards(uint256[],uint256[])"(
    epochIds: BigNumberish[],
    rewards: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalStake(overrides?: CallOverrides): Promise<BigNumber>;

  "totalStake()"(overrides?: CallOverrides): Promise<BigNumber>;

  updateAndReadEpochData(
    epochId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateAndReadEpochData(uint256,address)"(
    epochId: BigNumberish,
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  vestingEpochs(overrides?: CallOverrides): Promise<BigNumber>;

  "vestingEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    toAddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256)"(
    toAddr: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldToken(overrides?: CallOverrides): Promise<string>;

  "yieldToken()"(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    balances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dueInterests(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "dueInterests(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    fund(rewards: BigNumberish[], overrides?: CallOverrides): Promise<void>;

    "fund(uint256[])"(
      rewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

    "lastNYield()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastParamL(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastParamL(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramL(overrides?: CallOverrides): Promise<BigNumber>;

    "paramL()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendleTokenAddress(overrides?: CallOverrides): Promise<string>;

    "pendleTokenAddress()"(overrides?: CallOverrides): Promise<string>;

    readEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakeUnits: BigNumber;
        totalRewards: BigNumber;
        lastUpdated: BigNumber;
        stakeUnitsForUser: BigNumber;
        availableRewardsForUser: BigNumber;
      }
    >;

    "readEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakeUnits: BigNumber;
        totalRewards: BigNumber;
        lastUpdated: BigNumber;
        stakeUnitsForUser: BigNumber;
        availableRewardsForUser: BigNumber;
      }
    >;

    redeemDueInterests(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterests(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemRewards(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "redeemRewards(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUpEmergencyMode(
      spender: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpEmergencyMode(address,bool)"(
      spender: string,
      arg1: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    stake(
      forAddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "stake(address,uint256)"(
      forAddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    "stakeToken()"(overrides?: CallOverrides): Promise<string>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    topUpRewards(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "topUpRewards(uint256[],uint256[])"(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndReadEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakeUnits: BigNumber;
        totalRewards: BigNumber;
        lastUpdated: BigNumber;
        stakeUnitsForUser: BigNumber;
        availableRewardsForUser: BigNumber;
      }
    >;

    "updateAndReadEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        totalStakeUnits: BigNumber;
        totalRewards: BigNumber;
        lastUpdated: BigNumber;
        stakeUnitsForUser: BigNumber;
        availableRewardsForUser: BigNumber;
      }
    >;

    vestingEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      toAddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdraw(address,uint256)"(
      toAddr: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldToken(overrides?: CallOverrides): Promise<string>;

    "yieldToken()"(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Funded(
      rewards: null,
      numberOfEpochs: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber],
      { rewards: BigNumber[]; numberOfEpochs: BigNumber }
    >;

    PendleRewardsSettled(
      user: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    RewardsToppedUp(
      epochIds: null,
      rewards: null
    ): TypedEventFilter<
      [BigNumber[], BigNumber[]],
      { epochIds: BigNumber[]; rewards: BigNumber[] }
    >;

    Staked(
      user: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    Withdrawn(
      user: null,
      amount: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    balances(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    "balances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    dueInterests(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "dueInterests(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    epochDuration(overrides?: CallOverrides): Promise<BigNumber>;

    "epochDuration()"(overrides?: CallOverrides): Promise<BigNumber>;

    fund(
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "fund(uint256[])"(
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastNYield(overrides?: CallOverrides): Promise<BigNumber>;

    "lastNYield()"(overrides?: CallOverrides): Promise<BigNumber>;

    lastParamL(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lastParamL(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "numberOfEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    paramL(overrides?: CallOverrides): Promise<BigNumber>;

    "paramL()"(overrides?: CallOverrides): Promise<BigNumber>;

    pendleTokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    "pendleTokenAddress()"(overrides?: CallOverrides): Promise<BigNumber>;

    readEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "readEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemDueInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemRewards(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemRewards(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpEmergencyMode(
      spender: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUpEmergencyMode(address,bool)"(
      spender: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stake(
      forAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "stake(address,uint256)"(
      forAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    "stakeToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    startTime(overrides?: CallOverrides): Promise<BigNumber>;

    "startTime()"(overrides?: CallOverrides): Promise<BigNumber>;

    topUpRewards(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "topUpRewards(uint256[],uint256[])"(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalStake(overrides?: CallOverrides): Promise<BigNumber>;

    "totalStake()"(overrides?: CallOverrides): Promise<BigNumber>;

    updateAndReadEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateAndReadEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    vestingEpochs(overrides?: CallOverrides): Promise<BigNumber>;

    "vestingEpochs()"(overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      toAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address,uint256)"(
      toAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldToken(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldToken()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    balances(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "balances(address)"(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    dueInterests(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dueInterests(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    epochDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "epochDuration()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fund(
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "fund(uint256[])"(
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastNYield(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastNYield()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastParamL(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lastParamL(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "numberOfEpochs()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    paramL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paramL()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendleTokenAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "pendleTokenAddress()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    readEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "readEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemDueInterests(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemRewards(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemRewards(address)"(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      spender: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUpEmergencyMode(address,bool)"(
      spender: string,
      arg1: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stake(
      forAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "stake(address,uint256)"(
      forAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "stakeToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    startTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "startTime()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    topUpRewards(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "topUpRewards(uint256[],uint256[])"(
      epochIds: BigNumberish[],
      rewards: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalStake(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "totalStake()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAndReadEpochData(
      epochId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateAndReadEpochData(uint256,address)"(
      epochId: BigNumberish,
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    vestingEpochs(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "vestingEpochs()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdraw(
      toAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256)"(
      toAddr: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "yieldToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
