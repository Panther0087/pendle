/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PendleMarketEmergencyHandlerInterface extends ethers.utils.Interface {
  functions: {
    "governanceManager()": FunctionFragment;
    "marketData(address)": FunctionFragment;
    "pausingManager()": FunctionFragment;
    "setUpEmergencyMode(address,address[])": FunctionFragment;
    "updateLiqAddrArray(address,address[])": FunctionFragment;
    "validateLiqAddrArray(address,address[])": FunctionFragment;
    "withdraw(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "governanceManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "marketData", values: [string]): string;
  encodeFunctionData(
    functionFragment: "pausingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUpEmergencyMode",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiqAddrArray",
    values: [string, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateLiqAddrArray",
    values: [string, string[]]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "governanceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "marketData", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pausingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiqAddrArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateLiqAddrArray",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export class PendleMarketEmergencyHandler extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PendleMarketEmergencyHandlerInterface;

  functions: {
    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    "governanceManager()"(overrides?: CallOverrides): Promise<[string]>;

    marketData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber] & {
        factoryId: string;
        xyt: string;
        token: string;
        underlyingYieldToken: string;
        totalLp: BigNumber;
      }
    >;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber] & {
        factoryId: string;
        xyt: string;
        token: string;
        underlyingYieldToken: string;
        totalLp: BigNumber;
      }
    >;

    pausingManager(overrides?: CallOverrides): Promise<[string]>;

    "pausingManager()"(overrides?: CallOverrides): Promise<[string]>;

    setUpEmergencyMode(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUpEmergencyMode(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    "validateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<[void]>;

    withdraw(
      _marketAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdraw(address)"(
      _marketAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  governanceManager(overrides?: CallOverrides): Promise<string>;

  "governanceManager()"(overrides?: CallOverrides): Promise<string>;

  marketData(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber] & {
      factoryId: string;
      xyt: string;
      token: string;
      underlyingYieldToken: string;
      totalLp: BigNumber;
    }
  >;

  "marketData(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, BigNumber] & {
      factoryId: string;
      xyt: string;
      token: string;
      underlyingYieldToken: string;
      totalLp: BigNumber;
    }
  >;

  pausingManager(overrides?: CallOverrides): Promise<string>;

  "pausingManager()"(overrides?: CallOverrides): Promise<string>;

  setUpEmergencyMode(
    _marketAddr: string,
    _liqAddrArray: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUpEmergencyMode(address,address[])"(
    _marketAddr: string,
    _liqAddrArray: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateLiqAddrArray(
    _marketAddr: string,
    _liqAddrArray: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateLiqAddrArray(address,address[])"(
    _marketAddr: string,
    _liqAddrArray: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validateLiqAddrArray(
    _marketAddr: string,
    _liqAddrArray: string[],
    overrides?: CallOverrides
  ): Promise<void>;

  "validateLiqAddrArray(address,address[])"(
    _marketAddr: string,
    _liqAddrArray: string[],
    overrides?: CallOverrides
  ): Promise<void>;

  withdraw(
    _marketAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdraw(address)"(
    _marketAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    governanceManager(overrides?: CallOverrides): Promise<string>;

    "governanceManager()"(overrides?: CallOverrides): Promise<string>;

    marketData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber] & {
        factoryId: string;
        xyt: string;
        token: string;
        underlyingYieldToken: string;
        totalLp: BigNumber;
      }
    >;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, string, BigNumber] & {
        factoryId: string;
        xyt: string;
        token: string;
        underlyingYieldToken: string;
        totalLp: BigNumber;
      }
    >;

    pausingManager(overrides?: CallOverrides): Promise<string>;

    "pausingManager()"(overrides?: CallOverrides): Promise<string>;

    setUpEmergencyMode(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpEmergencyMode(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "updateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    validateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    "validateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(_marketAddr: string, overrides?: CallOverrides): Promise<void>;

    "withdraw(address)"(
      _marketAddr: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    marketData(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pausingManager(overrides?: CallOverrides): Promise<BigNumber>;

    "pausingManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUpEmergencyMode(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUpEmergencyMode(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "validateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdraw(
      _marketAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdraw(address)"(
      _marketAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governanceManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    marketData(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "marketData(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pausingManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUpEmergencyMode(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validateLiqAddrArray(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "validateLiqAddrArray(address,address[])"(
      _marketAddr: string,
      _liqAddrArray: string[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      _marketAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdraw(address)"(
      _marketAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
