/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface PendleForgeBaseV2Interface extends ethers.utils.Interface {
  functions: {
    "data()": FunctionFragment;
    "dueInterests(address,uint256,address)": FunctionFragment;
    "forgeId()": FunctionFragment;
    "getYieldBearingToken(address)": FunctionFragment;
    "governanceManager()": FunctionFragment;
    "mintOtAndXyt(address,uint256,uint256,address)": FunctionFragment;
    "newYieldContracts(address,uint256)": FunctionFragment;
    "pausingManager()": FunctionFragment;
    "redeemAfterExpiry(address,address,uint256)": FunctionFragment;
    "redeemDueInterests(address,address,uint256)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "registerTokens(address[],uint256[][])": FunctionFragment;
    "rewardManager()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "router()": FunctionFragment;
    "setUpEmergencyMode(address,uint256,address)": FunctionFragment;
    "setUpEmergencyModeV2(address,uint256,address,bool)": FunctionFragment;
    "tokenInfo(address)": FunctionFragment;
    "totalFee(address,uint256)": FunctionFragment;
    "updateDueInterests(address,uint256,address)": FunctionFragment;
    "updatePendingRewards(address,uint256,address)": FunctionFragment;
    "verifyToken(address,uint256[])": FunctionFragment;
    "withdrawEther(uint256,address)": FunctionFragment;
    "withdrawForgeFee(address,uint256)": FunctionFragment;
    "withdrawToken(address,uint256,address)": FunctionFragment;
    "yieldContractDeployer()": FunctionFragment;
    "yieldTokenHolders(address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "data", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dueInterests",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "forgeId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getYieldBearingToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "governanceManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintOtAndXyt",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "newYieldContracts",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pausingManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemAfterExpiry",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemDueInterests",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTokens",
    values: [string[], BigNumberish[][]]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUpEmergencyMode",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpEmergencyModeV2",
    values: [string, BigNumberish, string, boolean]
  ): string;
  encodeFunctionData(functionFragment: "tokenInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDueInterests",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePendingRewards",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyToken",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawEther",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawForgeFee",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawToken",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "yieldContractDeployer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "yieldTokenHolders",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "data", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "forgeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getYieldBearingToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "governanceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintOtAndXyt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "newYieldContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pausingManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemAfterExpiry",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUpEmergencyMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpEmergencyModeV2",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tokenInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "totalFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateDueInterests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePendingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawForgeFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldContractDeployer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "yieldTokenHolders",
    data: BytesLike
  ): Result;

  events: {
    "DueInterestsSettled(bytes32,address,uint256,uint256,uint256,address)": EventFragment;
    "EtherWithdraw(uint256,address)": EventFragment;
    "ForgeFeeWithdrawn(bytes32,address,uint256,uint256)": EventFragment;
    "MintYieldTokens(bytes32,address,uint256,uint256,uint256,address)": EventFragment;
    "NewYieldContracts(bytes32,address,uint256,address,address,address)": EventFragment;
    "RedeemYieldToken(bytes32,address,uint256,uint256,uint256,address)": EventFragment;
    "RegisterTokens(bytes32,address,uint256[])": EventFragment;
    "TokenWithdraw(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DueInterestsSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EtherWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ForgeFeeWithdrawn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MintYieldTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewYieldContracts"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemYieldToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RegisterTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenWithdraw"): EventFragment;
}

export class PendleForgeBaseV2 extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PendleForgeBaseV2Interface;

  functions: {
    data(overrides?: CallOverrides): Promise<[string]>;

    "data()"(overrides?: CallOverrides): Promise<[string]>;

    dueInterests(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "dueInterests(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    forgeId(overrides?: CallOverrides): Promise<[string]>;

    "forgeId()"(overrides?: CallOverrides): Promise<[string]>;

    getYieldBearingToken(
      _underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "getYieldBearingToken(address)"(
      _underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<[string]>;

    "governanceManager()"(overrides?: CallOverrides): Promise<[string]>;

    mintOtAndXyt(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "mintOtAndXyt(address,uint256,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<[string]>;

    "pausingManager()"(overrides?: CallOverrides): Promise<[string]>;

    redeemAfterExpiry(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemAfterExpiry(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemDueInterests(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemDueInterests(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemUnderlying(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerTokens(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "registerTokens(address[],uint256[][])"(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<[string]>;

    "rewardManager()"(overrides?: CallOverrides): Promise<[string]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    "rewardToken()"(overrides?: CallOverrides): Promise<[string]>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setUpEmergencyMode(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "setUpEmergencyMode(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<[void]>;

    setUpEmergencyModeV2(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUpEmergencyModeV2(address,uint256,address,bool)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { registered: boolean }>;

    "tokenInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean] & { registered: boolean }>;

    totalFee(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "totalFee(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateDueInterests(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateDueInterests(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyToken(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "verifyToken(address,uint256[])"(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawForgeFee(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawForgeFee(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<[string]>;

    "yieldContractDeployer()"(overrides?: CallOverrides): Promise<[string]>;

    yieldTokenHolders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    "yieldTokenHolders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  data(overrides?: CallOverrides): Promise<string>;

  "data()"(overrides?: CallOverrides): Promise<string>;

  dueInterests(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "dueInterests(address,uint256,address)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  forgeId(overrides?: CallOverrides): Promise<string>;

  "forgeId()"(overrides?: CallOverrides): Promise<string>;

  getYieldBearingToken(
    _underlyingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "getYieldBearingToken(address)"(
    _underlyingAsset: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  governanceManager(overrides?: CallOverrides): Promise<string>;

  "governanceManager()"(overrides?: CallOverrides): Promise<string>;

  mintOtAndXyt(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "mintOtAndXyt(address,uint256,uint256,address)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToTokenize: BigNumberish,
    _to: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  newYieldContracts(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "newYieldContracts(address,uint256)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pausingManager(overrides?: CallOverrides): Promise<string>;

  "pausingManager()"(overrides?: CallOverrides): Promise<string>;

  redeemAfterExpiry(
    _user: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemAfterExpiry(address,address,uint256)"(
    _user: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemDueInterests(
    _user: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemDueInterests(address,address,uint256)"(
    _user: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemUnderlying(
    _user: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemUnderlying(address,address,uint256,uint256)"(
    _user: string,
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _amountToRedeem: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerTokens(
    _underlyingAssets: string[],
    _tokenInfos: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "registerTokens(address[],uint256[][])"(
    _underlyingAssets: string[],
    _tokenInfos: BigNumberish[][],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rewardManager(overrides?: CallOverrides): Promise<string>;

  "rewardManager()"(overrides?: CallOverrides): Promise<string>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  "rewardToken()"(overrides?: CallOverrides): Promise<string>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setUpEmergencyMode(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<void>;

  "setUpEmergencyMode(address,uint256,address)"(
    arg0: string,
    arg1: BigNumberish,
    arg2: string,
    overrides?: CallOverrides
  ): Promise<void>;

  setUpEmergencyModeV2(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    spender: string,
    extraFlag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUpEmergencyModeV2(address,uint256,address,bool)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    spender: string,
    extraFlag: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenInfo(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  "tokenInfo(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  totalFee(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "totalFee(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateDueInterests(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateDueInterests(address,uint256,address)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePendingRewards(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePendingRewards(address,uint256,address)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyToken(
    _underlyingAsset: string,
    _tokenInfo: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "verifyToken(address,uint256[])"(
    _underlyingAsset: string,
    _tokenInfo: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawEther(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawEther(uint256,address)"(
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawForgeFee(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawForgeFee(address,uint256)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawToken(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "withdrawToken(address,uint256,address)"(
    token: string,
    amount: BigNumberish,
    sendTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  yieldContractDeployer(overrides?: CallOverrides): Promise<string>;

  "yieldContractDeployer()"(overrides?: CallOverrides): Promise<string>;

  yieldTokenHolders(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  "yieldTokenHolders(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    data(overrides?: CallOverrides): Promise<string>;

    "data()"(overrides?: CallOverrides): Promise<string>;

    dueInterests(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dueInterests(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forgeId(overrides?: CallOverrides): Promise<string>;

    "forgeId()"(overrides?: CallOverrides): Promise<string>;

    getYieldBearingToken(
      _underlyingAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    "getYieldBearingToken(address)"(
      _underlyingAsset: string,
      overrides?: CallOverrides
    ): Promise<string>;

    governanceManager(overrides?: CallOverrides): Promise<string>;

    "governanceManager()"(overrides?: CallOverrides): Promise<string>;

    mintOtAndXyt(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    "mintOtAndXyt(address,uint256,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber] & {
        ot: string;
        xyt: string;
        amountTokenMinted: BigNumber;
      }
    >;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { ot: string; xyt: string }>;

    pausingManager(overrides?: CallOverrides): Promise<string>;

    "pausingManager()"(overrides?: CallOverrides): Promise<string>;

    redeemAfterExpiry(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemAfterExpiry(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemDueInterests(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemDueInterests(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    redeemUnderlying(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerTokens(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    "registerTokens(address[],uint256[][])"(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: CallOverrides
    ): Promise<void>;

    rewardManager(overrides?: CallOverrides): Promise<string>;

    "rewardManager()"(overrides?: CallOverrides): Promise<string>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    "rewardToken()"(overrides?: CallOverrides): Promise<string>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setUpEmergencyMode(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpEmergencyMode(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpEmergencyModeV2(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpEmergencyModeV2(address,uint256,address,bool)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenInfo(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    "tokenInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    totalFee(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalFee(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDueInterests(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateDueInterests(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    verifyToken(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "verifyToken(address,uint256[])"(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawForgeFee(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawForgeFee(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: CallOverrides
    ): Promise<void>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<string>;

    "yieldContractDeployer()"(overrides?: CallOverrides): Promise<string>;

    yieldTokenHolders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    "yieldTokenHolders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    DueInterestsSettled(
      forgeId: null,
      underlyingAsset: string | null,
      expiry: BigNumberish | null,
      amount: null,
      forgeFeeAmount: null,
      user: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        amount: BigNumber;
        forgeFeeAmount: BigNumber;
        user: string;
      }
    >;

    EtherWithdraw(
      amount: null,
      sendTo: null
    ): TypedEventFilter<
      [BigNumber, string],
      { amount: BigNumber; sendTo: string }
    >;

    ForgeFeeWithdrawn(
      forgeId: null,
      underlyingAsset: string | null,
      expiry: BigNumberish | null,
      amount: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        amount: BigNumber;
      }
    >;

    MintYieldTokens(
      forgeId: null,
      underlyingAsset: string | null,
      expiry: BigNumberish | null,
      amountToTokenize: null,
      amountTokenMinted: null,
      user: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        amountToTokenize: BigNumber;
        amountTokenMinted: BigNumber;
        user: string;
      }
    >;

    NewYieldContracts(
      forgeId: null,
      underlyingAsset: string | null,
      expiry: BigNumberish | null,
      ot: null,
      xyt: null,
      yieldBearingAsset: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        ot: string;
        xyt: string;
        yieldBearingAsset: string;
      }
    >;

    RedeemYieldToken(
      forgeId: null,
      underlyingAsset: string | null,
      expiry: BigNumberish | null,
      amountToRedeem: null,
      redeemedAmount: null,
      user: string | null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber, string],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        amountToRedeem: BigNumber;
        redeemedAmount: BigNumber;
        user: string;
      }
    >;

    RegisterTokens(
      forgeId: null,
      underlyingAsset: null,
      container: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { forgeId: string; underlyingAsset: string; container: BigNumber[] }
    >;

    TokenWithdraw(
      token: null,
      amount: null,
      sendTo: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      { token: string; amount: BigNumber; sendTo: string }
    >;
  };

  estimateGas: {
    data(overrides?: CallOverrides): Promise<BigNumber>;

    "data()"(overrides?: CallOverrides): Promise<BigNumber>;

    dueInterests(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "dueInterests(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    forgeId(overrides?: CallOverrides): Promise<BigNumber>;

    "forgeId()"(overrides?: CallOverrides): Promise<BigNumber>;

    getYieldBearingToken(
      _underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "getYieldBearingToken(address)"(
      _underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    governanceManager(overrides?: CallOverrides): Promise<BigNumber>;

    "governanceManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    mintOtAndXyt(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "mintOtAndXyt(address,uint256,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pausingManager(overrides?: CallOverrides): Promise<BigNumber>;

    "pausingManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    redeemAfterExpiry(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemAfterExpiry(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemDueInterests(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemDueInterests(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemUnderlying(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerTokens(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "registerTokens(address[],uint256[][])"(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rewardManager(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardManager()"(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    "rewardToken()"(overrides?: CallOverrides): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setUpEmergencyMode(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "setUpEmergencyMode(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setUpEmergencyModeV2(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUpEmergencyModeV2(address,uint256,address,bool)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenInfo(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "tokenInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalFee(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "totalFee(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateDueInterests(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateDueInterests(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    verifyToken(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "verifyToken(address,uint256[])"(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawForgeFee(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawForgeFee(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    yieldContractDeployer(overrides?: CallOverrides): Promise<BigNumber>;

    "yieldContractDeployer()"(overrides?: CallOverrides): Promise<BigNumber>;

    yieldTokenHolders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "yieldTokenHolders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    data(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "data()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dueInterests(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "dueInterests(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    forgeId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "forgeId()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getYieldBearingToken(
      _underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "getYieldBearingToken(address)"(
      _underlyingAsset: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    governanceManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "governanceManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintOtAndXyt(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "mintOtAndXyt(address,uint256,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToTokenize: BigNumberish,
      _to: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    newYieldContracts(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "newYieldContracts(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pausingManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "pausingManager()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    redeemAfterExpiry(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemAfterExpiry(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemDueInterests(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemDueInterests(address,address,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemUnderlying(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemUnderlying(address,address,uint256,uint256)"(
      _user: string,
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _amountToRedeem: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerTokens(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "registerTokens(address[],uint256[][])"(
      _underlyingAssets: string[],
      _tokenInfos: BigNumberish[][],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rewardManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardManager()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "rewardToken()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUpEmergencyMode(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "setUpEmergencyMode(address,uint256,address)"(
      arg0: string,
      arg1: BigNumberish,
      arg2: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setUpEmergencyModeV2(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUpEmergencyModeV2(address,uint256,address,bool)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      spender: string,
      extraFlag: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenInfo(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "tokenInfo(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalFee(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "totalFee(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateDueInterests(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateDueInterests(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyToken(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "verifyToken(address,uint256[])"(
      _underlyingAsset: string,
      _tokenInfo: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawEther(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawEther(uint256,address)"(
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawForgeFee(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawForgeFee(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawToken(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "withdrawToken(address,uint256,address)"(
      token: string,
      amount: BigNumberish,
      sendTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    yieldContractDeployer(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yieldContractDeployer()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    yieldTokenHolders(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "yieldTokenHolders(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
