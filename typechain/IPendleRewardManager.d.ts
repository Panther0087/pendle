/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface IPendleRewardManagerInterface extends ethers.utils.Interface {
  functions: {
    "forgeId()": FunctionFragment;
    "redeemRewards(address,uint256,address)": FunctionFragment;
    "setSkippingRewards(bool)": FunctionFragment;
    "setUpdateFrequency(address[],uint256[])": FunctionFragment;
    "updateParamLManual(address,uint256)": FunctionFragment;
    "updatePendingRewards(address,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "forgeId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeemRewards",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setSkippingRewards",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setUpdateFrequency",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "updateParamLManual",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePendingRewards",
    values: [string, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "forgeId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSkippingRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUpdateFrequency",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateParamLManual",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePendingRewards",
    data: BytesLike
  ): Result;

  events: {
    "DueRewardsSettled(bytes32,address,uint256,uint256,address)": EventFragment;
    "SkippingRewardsSet(bool)": EventFragment;
    "UpdateFrequencySet(address[],uint256[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DueRewardsSettled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SkippingRewardsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFrequencySet"): EventFragment;
}

export class IPendleRewardManager extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IPendleRewardManagerInterface;

  functions: {
    forgeId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "forgeId()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    redeemRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "redeemRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSkippingRewards(
      skippingRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setSkippingRewards(bool)"(
      skippingRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setUpdateFrequency(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setUpdateFrequency(address[],uint256[])"(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateParamLManual(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updateParamLManual(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  forgeId(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "forgeId()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  redeemRewards(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "redeemRewards(address,uint256,address)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSkippingRewards(
    skippingRewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setSkippingRewards(bool)"(
    skippingRewards: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setUpdateFrequency(
    underlyingAssets: string[],
    frequencies: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setUpdateFrequency(address[],uint256[])"(
    underlyingAssets: string[],
    frequencies: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateParamLManual(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updateParamLManual(address,uint256)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePendingRewards(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "updatePendingRewards(address,uint256,address)"(
    _underlyingAsset: string,
    _expiry: BigNumberish,
    _user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    forgeId(overrides?: CallOverrides): Promise<string>;

    "forgeId()"(overrides?: CallOverrides): Promise<string>;

    redeemRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "redeemRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setSkippingRewards(
      skippingRewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    "setSkippingRewards(bool)"(
      skippingRewards: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setUpdateFrequency(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "setUpdateFrequency(address[],uint256[])"(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    updateParamLManual(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "updateParamLManual(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    DueRewardsSettled(
      forgeId: null,
      underlyingAsset: null,
      expiry: null,
      amountOut: null,
      user: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, string],
      {
        forgeId: string;
        underlyingAsset: string;
        expiry: BigNumber;
        amountOut: BigNumber;
        user: string;
      }
    >;

    SkippingRewardsSet(
      undefined: null
    ): TypedEventFilter<[boolean], { arg0: boolean }>;

    UpdateFrequencySet(
      undefined: null,
      undefined: null
    ): TypedEventFilter<
      [string[], BigNumber[]],
      { arg0: string[]; arg1: BigNumber[] }
    >;
  };

  estimateGas: {
    forgeId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "forgeId()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    redeemRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "redeemRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSkippingRewards(
      skippingRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setSkippingRewards(bool)"(
      skippingRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setUpdateFrequency(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setUpdateFrequency(address[],uint256[])"(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateParamLManual(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updateParamLManual(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    forgeId(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "forgeId()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    redeemRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "redeemRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSkippingRewards(
      skippingRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setSkippingRewards(bool)"(
      skippingRewards: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setUpdateFrequency(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setUpdateFrequency(address[],uint256[])"(
      underlyingAssets: string[],
      frequencies: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateParamLManual(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updateParamLManual(address,uint256)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePendingRewards(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "updatePendingRewards(address,uint256,address)"(
      _underlyingAsset: string,
      _expiry: BigNumberish,
      _user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
