/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  Contract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface MockMathLibraryInterface extends ethers.utils.Interface {
  functions: {
    "checkMultOverflow(uint256,uint256)": FunctionFragment;
    "fpart(uint256)": FunctionFragment;
    "ln(uint256,uint256)": FunctionFragment;
    "log2ForSmallNumber(uint256)": FunctionFragment;
    "log2Int(uint256,uint256)": FunctionFragment;
    "logBase2(uint256,uint256)": FunctionFragment;
    "max(uint256,uint256)": FunctionFragment;
    "min(uint256,uint256)": FunctionFragment;
    "rdiv(uint256,uint256)": FunctionFragment;
    "rmul(uint256,uint256)": FunctionFragment;
    "rpow(uint256,uint256)": FunctionFragment;
    "rpowe(uint256)": FunctionFragment;
    "rpowi(uint256,uint256)": FunctionFragment;
    "sqrt(uint256)": FunctionFragment;
    "toFP(uint256)": FunctionFragment;
    "toInt(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "checkMultOverflow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fpart", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "ln",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "log2ForSmallNumber",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "log2Int",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "logBase2",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "max",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "min",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rdiv",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rmul",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rpow",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "rpowe", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "rpowi",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sqrt", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "toFP", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "toInt", values: [BigNumberish]): string;

  decodeFunctionResult(
    functionFragment: "checkMultOverflow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fpart", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ln", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "log2ForSmallNumber",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "log2Int", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "logBase2", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "max", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "min", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rdiv", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rmul", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpowe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rpowi", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sqrt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toFP", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "toInt", data: BytesLike): Result;

  events: {};
}

export class MockMathLibrary extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MockMathLibraryInterface;

  functions: {
    checkMultOverflow(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "checkMultOverflow(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    fpart(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "fpart(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    ln(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "ln(uint256,uint256)"(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    log2ForSmallNumber(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "log2ForSmallNumber(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    log2Int(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "log2Int(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    logBase2(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "logBase2(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rdiv(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rmul(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rpow(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rpow(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rpowe(exp: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "rpowe(uint256)"(
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rpowi(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    "rpowi(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sqrt(y: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "sqrt(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toFP(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "toFP(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    toInt(value: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    "toInt(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  checkMultOverflow(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "checkMultOverflow(uint256,uint256)"(
    _x: BigNumberish,
    _y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  fpart(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "fpart(uint256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  ln(
    p: BigNumberish,
    q: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ln(uint256,uint256)"(
    p: BigNumberish,
    q: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  log2ForSmallNumber(
    _x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "log2ForSmallNumber(uint256)"(
    _x: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  log2Int(
    _p: BigNumberish,
    _q: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "log2Int(uint256,uint256)"(
    _p: BigNumberish,
    _q: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  logBase2(
    _p: BigNumberish,
    _q: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "logBase2(uint256,uint256)"(
    _p: BigNumberish,
    _q: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  max(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "max(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  min(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "min(uint256,uint256)"(
    a: BigNumberish,
    b: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rdiv(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rdiv(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rmul(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rmul(uint256,uint256)"(
    x: BigNumberish,
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpow(
    base: BigNumberish,
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rpow(uint256,uint256)"(
    base: BigNumberish,
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpowe(exp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "rpowe(uint256)"(
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rpowi(
    base: BigNumberish,
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "rpowi(uint256,uint256)"(
    base: BigNumberish,
    exp: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  sqrt(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "sqrt(uint256)"(
    y: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toFP(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "toFP(uint256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  toInt(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  "toInt(uint256)"(
    value: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    checkMultOverflow(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "checkMultOverflow(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    fpart(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "fpart(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ln(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ln(uint256,uint256)"(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2ForSmallNumber(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "log2ForSmallNumber(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2Int(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "log2Int(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    logBase2(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "logBase2(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rdiv(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rmul(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rpow(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpowe(exp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rpowe(uint256)"(
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpowi(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rpowi(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sqrt(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sqrt(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toFP(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "toFP(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toInt(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "toInt(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    checkMultOverflow(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkMultOverflow(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fpart(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "fpart(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ln(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ln(uint256,uint256)"(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2ForSmallNumber(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "log2ForSmallNumber(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    log2Int(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "log2Int(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    logBase2(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "logBase2(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rdiv(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rmul(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpow(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rpow(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpowe(exp: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rpowe(uint256)"(
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rpowi(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "rpowi(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sqrt(y: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "sqrt(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toFP(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "toFP(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    toInt(value: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "toInt(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    checkMultOverflow(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkMultOverflow(uint256,uint256)"(
      _x: BigNumberish,
      _y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fpart(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "fpart(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ln(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ln(uint256,uint256)"(
      p: BigNumberish,
      q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log2ForSmallNumber(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "log2ForSmallNumber(uint256)"(
      _x: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    log2Int(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "log2Int(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    logBase2(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "logBase2(uint256,uint256)"(
      _p: BigNumberish,
      _q: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    max(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "max(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    min(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "min(uint256,uint256)"(
      a: BigNumberish,
      b: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rdiv(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rdiv(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rmul(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rmul(uint256,uint256)"(
      x: BigNumberish,
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpow(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rpow(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpowe(
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rpowe(uint256)"(
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rpowi(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rpowi(uint256,uint256)"(
      base: BigNumberish,
      exp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sqrt(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "sqrt(uint256)"(
      y: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toFP(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toFP(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    toInt(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "toInt(uint256)"(
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
